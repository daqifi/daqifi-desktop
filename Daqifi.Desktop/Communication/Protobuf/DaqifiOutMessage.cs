// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DaqifiOutMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_DaqifiOutMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DaqifiOutMessage, global::DaqifiOutMessage.Builder> internal__static_DaqifiOutMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static DaqifiOutMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZEYXFpZmlPdXRNZXNzYWdlLnByb3RvIoENChBEYXFpZmlPdXRNZXNzYWdl", 
            "EhYKDm1zZ190aW1lX3N0YW1wGAEgASgNEhYKDmFuYWxvZ19pbl9kYXRhGAIg", 
            "AygREhwKFGFuYWxvZ19pbl9kYXRhX2Zsb2F0GAMgAygCEhkKEWFuYWxvZ19p", 
            "bl9kYXRhX3RzGAQgAygNEhQKDGRpZ2l0YWxfZGF0YRgFIAEoDBIXCg9kaWdp", 
            "dGFsX2RhdGFfdHMYBiADKA0SFwoPYW5hbG9nX291dF9kYXRhGAcgAygNEhUK", 
            "DWRldmljZV9zdGF0dXMYCCABKA0SEgoKcHdyX3N0YXR1cxgJIAEoDRITCgti", 
            "YXR0X3N0YXR1cxgKIAEoDRITCgt0ZW1wX3N0YXR1cxgLIAEoERIWCg50aW1l", 
            "c3RhbXBfZnJlcRgQIAEoDRIaChJhbmFsb2dfaW5fcG9ydF9udW0YESABKA0S", 
            "HwoXYW5hbG9nX2luX3BvcnRfbnVtX3ByaXYYEiABKA0SGwoTYW5hbG9nX2lu", 
            "X3BvcnRfdHlwZRgTIAEoDBIdChVhbmFsb2dfaW5fcG9ydF9hdl9yc2UYFCAB", 
            "KAwSGgoSYW5hbG9nX2luX3BvcnRfcnNlGBUgASgMEh4KFmFuYWxvZ19pbl9w", 
            "b3J0X2VuYWJsZWQYFiABKAwSHwoXYW5hbG9nX2luX3BvcnRfYXZfcmFuZ2UY", 
            "FyADKAISJAocYW5hbG9nX2luX3BvcnRfYXZfcmFuZ2VfcHJpdhgYIAMoAhIc", 
            "ChRhbmFsb2dfaW5fcG9ydF9yYW5nZRgZIAMoAhIhChlhbmFsb2dfaW5fcG9y", 
            "dF9yYW5nZV9wcml2GBogAygCEhUKDWFuYWxvZ19pbl9yZXMYGyABKA0SGgoS", 
            "YW5hbG9nX2luX3Jlc19wcml2GBwgASgNEh0KFWFuYWxvZ19pbl9pbnRfc2Nh", 
            "bGVfbRgdIAMoAhIiChphbmFsb2dfaW5faW50X3NjYWxlX21fcHJpdhgeIAMo", 
            "AhIXCg9hbmFsb2dfaW5fY2FsX20YHyADKAISFwoPYW5hbG9nX2luX2NhbF9i", 
            "GCAgAygCEhwKFGFuYWxvZ19pbl9jYWxfbV9wcml2GCEgAygCEhwKFGFuYWxv", 
            "Z19pbl9jYWxfYl9wcml2GCIgAygCEhgKEGRpZ2l0YWxfcG9ydF9udW0YIyAB", 
            "KA0SGQoRZGlnaXRhbF9wb3J0X3R5cGUYJCABKAwSGAoQZGlnaXRhbF9wb3J0", 
            "X2RpchglIAEoDBIbChNhbmFsb2dfb3V0X3BvcnRfbnVtGCYgASgNEhwKFGFu", 
            "YWxvZ19vdXRfcG9ydF90eXBlGCcgASgMEhYKDmFuYWxvZ19vdXRfcmVzGCgg", 
            "ASgNEiAKGGFuYWxvZ19vdXRfcG9ydF9hdl9yYW5nZRgpIAMoAhIdChVhbmFs", 
            "b2dfb3V0X3BvcnRfcmFuZ2UYKiABKAISDwoHaXBfYWRkchgrIAEoDBIQCghu", 
            "ZXRfbWFzaxgsIAEoDBIPCgdnYXRld2F5GC0gASgMEhMKC3ByaW1hcnlfZG5z", 
            "GC4gASgMEhUKDXNlY29uZGFyeV9kbnMYLyABKAwSEAoIbWFjX2FkZHIYMCAB", 
            "KAwSEgoKaXBfYWRkcl92NhgxIAEoDBIZChFzdWJfcHJlX2xlbmd0aF92Nhgy", 
            "IAEoDBISCgpnYXRld2F5X3Y2GDMgASgMEhYKDnByaW1hcnlfZG5zX3Y2GDQg", 
            "ASgMEhgKEHNlY29uZGFyeV9kbnNfdjYYNSABKAwSDgoGZXVpXzY0GDYgASgM", 
            "EhEKCWhvc3RfbmFtZRg3IAEoCRITCgtkZXZpY2VfcG9ydBg4IAEoDRIcChRm", 
            "cmllbmRseV9kZXZpY2VfbmFtZRg5IAEoCRIMCgRzc2lkGDogASgJEhUKDXNz", 
            "aWRfc3RyZW5ndGgYOyABKA0SGgoSd2lmaV9zZWN1cml0eV9tb2RlGDwgASgN", 
            "EhUKDXdpZmlfaW5mX21vZGUYPSABKA0SDwoHYXZfc3NpZBg+IAMoCRIYChBh", 
            "dl9zc2lkX3N0cmVuZ3RoGD8gAygNEh0KFWF2X3dpZmlfc2VjdXJpdHlfbW9k", 
            "ZRhAIAMoDRIYChBhdl93aWZpX2luZl9tb2RlGEEgAygNEhEKCWRldmljZV9w", 
            "bhhCIAEoCRIVCg1kZXZpY2VfaHdfcmV2GEMgASgJEhUKDWRldmljZV9md19y", 
          "ZXYYRCABKAkSEQoJZGV2aWNlX3NuGEUgASgE"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_DaqifiOutMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_DaqifiOutMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DaqifiOutMessage, global::DaqifiOutMessage.Builder>(internal__static_DaqifiOutMessage__Descriptor,
                new string[] { "MsgTimeStamp", "AnalogInData", "AnalogInDataFloat", "AnalogInDataTs", "DigitalData", "DigitalDataTs", "AnalogOutData", "DeviceStatus", "PwrStatus", "BattStatus", "TempStatus", "TimestampFreq", "AnalogInPortNum", "AnalogInPortNumPriv", "AnalogInPortType", "AnalogInPortAvRse", "AnalogInPortRse", "AnalogInPortEnabled", "AnalogInPortAvRange", "AnalogInPortAvRangePriv", "AnalogInPortRange", "AnalogInPortRangePriv", "AnalogInRes", "AnalogInResPriv", "AnalogInIntScaleM", "AnalogInIntScaleMPriv", "AnalogInCalM", "AnalogInCalB", "AnalogInCalMPriv", "AnalogInCalBPriv", "DigitalPortNum", "DigitalPortType", "DigitalPortDir", "AnalogOutPortNum", "AnalogOutPortType", "AnalogOutRes", "AnalogOutPortAvRange", "AnalogOutPortRange", "IpAddr", "NetMask", "Gateway", "PrimaryDns", "SecondaryDns", "MacAddr", "IpAddrV6", "SubPreLengthV6", "GatewayV6", "PrimaryDnsV6", "SecondaryDnsV6", "Eui64", "HostName", "DevicePort", "FriendlyDeviceName", "Ssid", "SsidStrength", "WifiSecurityMode", "WifiInfMode", "AvSsid", "AvSsidStrength", "AvWifiSecurityMode", "AvWifiInfMode", "DevicePn", "DeviceHwRev", "DeviceFwRev", "DeviceSn", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DaqifiOutMessage : pb::GeneratedMessage<DaqifiOutMessage, DaqifiOutMessage.Builder>, IDaqifiOutMessage
{
  private DaqifiOutMessage() { }
  private static readonly DaqifiOutMessage defaultInstance = new DaqifiOutMessage().MakeReadOnly();
  private static readonly string[] _daqifiOutMessageFieldNames = new string[] { "analog_in_cal_b", "analog_in_cal_b_priv", "analog_in_cal_m", "analog_in_cal_m_priv", "analog_in_data", "analog_in_data_float", "analog_in_data_ts", "analog_in_int_scale_m", "analog_in_int_scale_m_priv", "analog_in_port_av_range", "analog_in_port_av_range_priv", "analog_in_port_av_rse", "analog_in_port_enabled", "analog_in_port_num", "analog_in_port_num_priv", "analog_in_port_range", "analog_in_port_range_priv", "analog_in_port_rse", "analog_in_port_type", "analog_in_res", "analog_in_res_priv", "analog_out_data", "analog_out_port_av_range", "analog_out_port_num", "analog_out_port_range", "analog_out_port_type", "analog_out_res", "av_ssid", "av_ssid_strength", "av_wifi_inf_mode", "av_wifi_security_mode", "batt_status", "device_fw_rev", "device_hw_rev", "device_pn", "device_port", "device_sn", "device_status", "digital_data", "digital_data_ts", "digital_port_dir", "digital_port_num", "digital_port_type", "eui_64", "friendly_device_name", "gateway", "gateway_v6", "host_name", "ip_addr", "ip_addr_v6", "mac_addr", "msg_time_stamp", "net_mask", "primary_dns", "primary_dns_v6", "pwr_status", "secondary_dns", "secondary_dns_v6", "ssid", "ssid_strength", "sub_pre_length_v6", "temp_status", "timestamp_freq", "wifi_inf_mode", "wifi_security_mode" };
  private static readonly uint[] _daqifiOutMessageFieldTags = new uint[] { 261, 277, 253, 269, 16, 29, 32, 237, 245, 189, 197, 162, 178, 136, 144, 205, 213, 170, 154, 216, 224, 56, 333, 304, 341, 314, 320, 498, 504, 520, 512, 80, 546, 538, 530, 448, 552, 64, 42, 48, 298, 280, 290, 434, 458, 362, 410, 442, 346, 394, 386, 8, 354, 370, 418, 72, 378, 426, 466, 472, 402, 88, 128, 488, 480 };
  public static DaqifiOutMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DaqifiOutMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DaqifiOutMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.DaqifiOutMessage.internal__static_DaqifiOutMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DaqifiOutMessage, DaqifiOutMessage.Builder> InternalFieldAccessors {
    get { return global::Proto.DaqifiOutMessage.internal__static_DaqifiOutMessage__FieldAccessorTable; }
  }
  
  public const int MsgTimeStampFieldNumber = 1;
  private bool hasMsgTimeStamp;
  private uint msgTimeStamp_;
  public bool HasMsgTimeStamp {
    get { return hasMsgTimeStamp; }
  }
  [global::System.CLSCompliant(false)]
  public uint MsgTimeStamp {
    get { return msgTimeStamp_; }
  }
  
  public const int AnalogInDataFieldNumber = 2;
  private pbc::PopsicleList<int> analogInData_ = new pbc::PopsicleList<int>();
  public scg::IList<int> AnalogInDataList {
    get { return pbc::Lists.AsReadOnly(analogInData_); }
  }
  public int AnalogInDataCount {
    get { return analogInData_.Count; }
  }
  public int GetAnalogInData(int index) {
    return analogInData_[index];
  }
  
  public const int AnalogInDataFloatFieldNumber = 3;
  private pbc::PopsicleList<float> analogInDataFloat_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInDataFloatList {
    get { return pbc::Lists.AsReadOnly(analogInDataFloat_); }
  }
  public int AnalogInDataFloatCount {
    get { return analogInDataFloat_.Count; }
  }
  public float GetAnalogInDataFloat(int index) {
    return analogInDataFloat_[index];
  }
  
  public const int AnalogInDataTsFieldNumber = 4;
  private pbc::PopsicleList<uint> analogInDataTs_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AnalogInDataTsList {
    get { return pbc::Lists.AsReadOnly(analogInDataTs_); }
  }
  public int AnalogInDataTsCount {
    get { return analogInDataTs_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAnalogInDataTs(int index) {
    return analogInDataTs_[index];
  }
  
  public const int DigitalDataFieldNumber = 5;
  private bool hasDigitalData;
  private pb::ByteString digitalData_ = pb::ByteString.Empty;
  public bool HasDigitalData {
    get { return hasDigitalData; }
  }
  public pb::ByteString DigitalData {
    get { return digitalData_; }
  }
  
  public const int DigitalDataTsFieldNumber = 6;
  private pbc::PopsicleList<uint> digitalDataTs_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> DigitalDataTsList {
    get { return pbc::Lists.AsReadOnly(digitalDataTs_); }
  }
  public int DigitalDataTsCount {
    get { return digitalDataTs_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetDigitalDataTs(int index) {
    return digitalDataTs_[index];
  }
  
  public const int AnalogOutDataFieldNumber = 7;
  private pbc::PopsicleList<uint> analogOutData_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AnalogOutDataList {
    get { return pbc::Lists.AsReadOnly(analogOutData_); }
  }
  public int AnalogOutDataCount {
    get { return analogOutData_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAnalogOutData(int index) {
    return analogOutData_[index];
  }
  
  public const int DeviceStatusFieldNumber = 8;
  private bool hasDeviceStatus;
  private uint deviceStatus_;
  public bool HasDeviceStatus {
    get { return hasDeviceStatus; }
  }
  [global::System.CLSCompliant(false)]
  public uint DeviceStatus {
    get { return deviceStatus_; }
  }
  
  public const int PwrStatusFieldNumber = 9;
  private bool hasPwrStatus;
  private uint pwrStatus_;
  public bool HasPwrStatus {
    get { return hasPwrStatus; }
  }
  [global::System.CLSCompliant(false)]
  public uint PwrStatus {
    get { return pwrStatus_; }
  }
  
  public const int BattStatusFieldNumber = 10;
  private bool hasBattStatus;
  private uint battStatus_;
  public bool HasBattStatus {
    get { return hasBattStatus; }
  }
  [global::System.CLSCompliant(false)]
  public uint BattStatus {
    get { return battStatus_; }
  }
  
  public const int TempStatusFieldNumber = 11;
  private bool hasTempStatus;
  private int tempStatus_;
  public bool HasTempStatus {
    get { return hasTempStatus; }
  }
  public int TempStatus {
    get { return tempStatus_; }
  }
  
  public const int TimestampFreqFieldNumber = 16;
  private bool hasTimestampFreq;
  private uint timestampFreq_;
  public bool HasTimestampFreq {
    get { return hasTimestampFreq; }
  }
  [global::System.CLSCompliant(false)]
  public uint TimestampFreq {
    get { return timestampFreq_; }
  }
  
  public const int AnalogInPortNumFieldNumber = 17;
  private bool hasAnalogInPortNum;
  private uint analogInPortNum_;
  public bool HasAnalogInPortNum {
    get { return hasAnalogInPortNum; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogInPortNum {
    get { return analogInPortNum_; }
  }
  
  public const int AnalogInPortNumPrivFieldNumber = 18;
  private bool hasAnalogInPortNumPriv;
  private uint analogInPortNumPriv_;
  public bool HasAnalogInPortNumPriv {
    get { return hasAnalogInPortNumPriv; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogInPortNumPriv {
    get { return analogInPortNumPriv_; }
  }
  
  public const int AnalogInPortTypeFieldNumber = 19;
  private bool hasAnalogInPortType;
  private pb::ByteString analogInPortType_ = pb::ByteString.Empty;
  public bool HasAnalogInPortType {
    get { return hasAnalogInPortType; }
  }
  public pb::ByteString AnalogInPortType {
    get { return analogInPortType_; }
  }
  
  public const int AnalogInPortAvRseFieldNumber = 20;
  private bool hasAnalogInPortAvRse;
  private pb::ByteString analogInPortAvRse_ = pb::ByteString.Empty;
  public bool HasAnalogInPortAvRse {
    get { return hasAnalogInPortAvRse; }
  }
  public pb::ByteString AnalogInPortAvRse {
    get { return analogInPortAvRse_; }
  }
  
  public const int AnalogInPortRseFieldNumber = 21;
  private bool hasAnalogInPortRse;
  private pb::ByteString analogInPortRse_ = pb::ByteString.Empty;
  public bool HasAnalogInPortRse {
    get { return hasAnalogInPortRse; }
  }
  public pb::ByteString AnalogInPortRse {
    get { return analogInPortRse_; }
  }
  
  public const int AnalogInPortEnabledFieldNumber = 22;
  private bool hasAnalogInPortEnabled;
  private pb::ByteString analogInPortEnabled_ = pb::ByteString.Empty;
  public bool HasAnalogInPortEnabled {
    get { return hasAnalogInPortEnabled; }
  }
  public pb::ByteString AnalogInPortEnabled {
    get { return analogInPortEnabled_; }
  }
  
  public const int AnalogInPortAvRangeFieldNumber = 23;
  private pbc::PopsicleList<float> analogInPortAvRange_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInPortAvRangeList {
    get { return pbc::Lists.AsReadOnly(analogInPortAvRange_); }
  }
  public int AnalogInPortAvRangeCount {
    get { return analogInPortAvRange_.Count; }
  }
  public float GetAnalogInPortAvRange(int index) {
    return analogInPortAvRange_[index];
  }
  
  public const int AnalogInPortAvRangePrivFieldNumber = 24;
  private pbc::PopsicleList<float> analogInPortAvRangePriv_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInPortAvRangePrivList {
    get { return pbc::Lists.AsReadOnly(analogInPortAvRangePriv_); }
  }
  public int AnalogInPortAvRangePrivCount {
    get { return analogInPortAvRangePriv_.Count; }
  }
  public float GetAnalogInPortAvRangePriv(int index) {
    return analogInPortAvRangePriv_[index];
  }
  
  public const int AnalogInPortRangeFieldNumber = 25;
  private pbc::PopsicleList<float> analogInPortRange_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInPortRangeList {
    get { return pbc::Lists.AsReadOnly(analogInPortRange_); }
  }
  public int AnalogInPortRangeCount {
    get { return analogInPortRange_.Count; }
  }
  public float GetAnalogInPortRange(int index) {
    return analogInPortRange_[index];
  }
  
  public const int AnalogInPortRangePrivFieldNumber = 26;
  private pbc::PopsicleList<float> analogInPortRangePriv_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInPortRangePrivList {
    get { return pbc::Lists.AsReadOnly(analogInPortRangePriv_); }
  }
  public int AnalogInPortRangePrivCount {
    get { return analogInPortRangePriv_.Count; }
  }
  public float GetAnalogInPortRangePriv(int index) {
    return analogInPortRangePriv_[index];
  }
  
  public const int AnalogInResFieldNumber = 27;
  private bool hasAnalogInRes;
  private uint analogInRes_;
  public bool HasAnalogInRes {
    get { return hasAnalogInRes; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogInRes {
    get { return analogInRes_; }
  }
  
  public const int AnalogInResPrivFieldNumber = 28;
  private bool hasAnalogInResPriv;
  private uint analogInResPriv_;
  public bool HasAnalogInResPriv {
    get { return hasAnalogInResPriv; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogInResPriv {
    get { return analogInResPriv_; }
  }
  
  public const int AnalogInIntScaleMFieldNumber = 29;
  private pbc::PopsicleList<float> analogInIntScaleM_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInIntScaleMList {
    get { return pbc::Lists.AsReadOnly(analogInIntScaleM_); }
  }
  public int AnalogInIntScaleMCount {
    get { return analogInIntScaleM_.Count; }
  }
  public float GetAnalogInIntScaleM(int index) {
    return analogInIntScaleM_[index];
  }
  
  public const int AnalogInIntScaleMPrivFieldNumber = 30;
  private pbc::PopsicleList<float> analogInIntScaleMPriv_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInIntScaleMPrivList {
    get { return pbc::Lists.AsReadOnly(analogInIntScaleMPriv_); }
  }
  public int AnalogInIntScaleMPrivCount {
    get { return analogInIntScaleMPriv_.Count; }
  }
  public float GetAnalogInIntScaleMPriv(int index) {
    return analogInIntScaleMPriv_[index];
  }
  
  public const int AnalogInCalMFieldNumber = 31;
  private pbc::PopsicleList<float> analogInCalM_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInCalMList {
    get { return pbc::Lists.AsReadOnly(analogInCalM_); }
  }
  public int AnalogInCalMCount {
    get { return analogInCalM_.Count; }
  }
  public float GetAnalogInCalM(int index) {
    return analogInCalM_[index];
  }
  
  public const int AnalogInCalBFieldNumber = 32;
  private pbc::PopsicleList<float> analogInCalB_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInCalBList {
    get { return pbc::Lists.AsReadOnly(analogInCalB_); }
  }
  public int AnalogInCalBCount {
    get { return analogInCalB_.Count; }
  }
  public float GetAnalogInCalB(int index) {
    return analogInCalB_[index];
  }
  
  public const int AnalogInCalMPrivFieldNumber = 33;
  private pbc::PopsicleList<float> analogInCalMPriv_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInCalMPrivList {
    get { return pbc::Lists.AsReadOnly(analogInCalMPriv_); }
  }
  public int AnalogInCalMPrivCount {
    get { return analogInCalMPriv_.Count; }
  }
  public float GetAnalogInCalMPriv(int index) {
    return analogInCalMPriv_[index];
  }
  
  public const int AnalogInCalBPrivFieldNumber = 34;
  private pbc::PopsicleList<float> analogInCalBPriv_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogInCalBPrivList {
    get { return pbc::Lists.AsReadOnly(analogInCalBPriv_); }
  }
  public int AnalogInCalBPrivCount {
    get { return analogInCalBPriv_.Count; }
  }
  public float GetAnalogInCalBPriv(int index) {
    return analogInCalBPriv_[index];
  }
  
  public const int DigitalPortNumFieldNumber = 35;
  private bool hasDigitalPortNum;
  private uint digitalPortNum_;
  public bool HasDigitalPortNum {
    get { return hasDigitalPortNum; }
  }
  [global::System.CLSCompliant(false)]
  public uint DigitalPortNum {
    get { return digitalPortNum_; }
  }
  
  public const int DigitalPortTypeFieldNumber = 36;
  private bool hasDigitalPortType;
  private pb::ByteString digitalPortType_ = pb::ByteString.Empty;
  public bool HasDigitalPortType {
    get { return hasDigitalPortType; }
  }
  public pb::ByteString DigitalPortType {
    get { return digitalPortType_; }
  }
  
  public const int DigitalPortDirFieldNumber = 37;
  private bool hasDigitalPortDir;
  private pb::ByteString digitalPortDir_ = pb::ByteString.Empty;
  public bool HasDigitalPortDir {
    get { return hasDigitalPortDir; }
  }
  public pb::ByteString DigitalPortDir {
    get { return digitalPortDir_; }
  }
  
  public const int AnalogOutPortNumFieldNumber = 38;
  private bool hasAnalogOutPortNum;
  private uint analogOutPortNum_;
  public bool HasAnalogOutPortNum {
    get { return hasAnalogOutPortNum; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogOutPortNum {
    get { return analogOutPortNum_; }
  }
  
  public const int AnalogOutPortTypeFieldNumber = 39;
  private bool hasAnalogOutPortType;
  private pb::ByteString analogOutPortType_ = pb::ByteString.Empty;
  public bool HasAnalogOutPortType {
    get { return hasAnalogOutPortType; }
  }
  public pb::ByteString AnalogOutPortType {
    get { return analogOutPortType_; }
  }
  
  public const int AnalogOutResFieldNumber = 40;
  private bool hasAnalogOutRes;
  private uint analogOutRes_;
  public bool HasAnalogOutRes {
    get { return hasAnalogOutRes; }
  }
  [global::System.CLSCompliant(false)]
  public uint AnalogOutRes {
    get { return analogOutRes_; }
  }
  
  public const int AnalogOutPortAvRangeFieldNumber = 41;
  private pbc::PopsicleList<float> analogOutPortAvRange_ = new pbc::PopsicleList<float>();
  public scg::IList<float> AnalogOutPortAvRangeList {
    get { return pbc::Lists.AsReadOnly(analogOutPortAvRange_); }
  }
  public int AnalogOutPortAvRangeCount {
    get { return analogOutPortAvRange_.Count; }
  }
  public float GetAnalogOutPortAvRange(int index) {
    return analogOutPortAvRange_[index];
  }
  
  public const int AnalogOutPortRangeFieldNumber = 42;
  private bool hasAnalogOutPortRange;
  private float analogOutPortRange_;
  public bool HasAnalogOutPortRange {
    get { return hasAnalogOutPortRange; }
  }
  public float AnalogOutPortRange {
    get { return analogOutPortRange_; }
  }
  
  public const int IpAddrFieldNumber = 43;
  private bool hasIpAddr;
  private pb::ByteString ipAddr_ = pb::ByteString.Empty;
  public bool HasIpAddr {
    get { return hasIpAddr; }
  }
  public pb::ByteString IpAddr {
    get { return ipAddr_; }
  }
  
  public const int NetMaskFieldNumber = 44;
  private bool hasNetMask;
  private pb::ByteString netMask_ = pb::ByteString.Empty;
  public bool HasNetMask {
    get { return hasNetMask; }
  }
  public pb::ByteString NetMask {
    get { return netMask_; }
  }
  
  public const int GatewayFieldNumber = 45;
  private bool hasGateway;
  private pb::ByteString gateway_ = pb::ByteString.Empty;
  public bool HasGateway {
    get { return hasGateway; }
  }
  public pb::ByteString Gateway {
    get { return gateway_; }
  }
  
  public const int PrimaryDnsFieldNumber = 46;
  private bool hasPrimaryDns;
  private pb::ByteString primaryDns_ = pb::ByteString.Empty;
  public bool HasPrimaryDns {
    get { return hasPrimaryDns; }
  }
  public pb::ByteString PrimaryDns {
    get { return primaryDns_; }
  }
  
  public const int SecondaryDnsFieldNumber = 47;
  private bool hasSecondaryDns;
  private pb::ByteString secondaryDns_ = pb::ByteString.Empty;
  public bool HasSecondaryDns {
    get { return hasSecondaryDns; }
  }
  public pb::ByteString SecondaryDns {
    get { return secondaryDns_; }
  }
  
  public const int MacAddrFieldNumber = 48;
  private bool hasMacAddr;
  private pb::ByteString macAddr_ = pb::ByteString.Empty;
  public bool HasMacAddr {
    get { return hasMacAddr; }
  }
  public pb::ByteString MacAddr {
    get { return macAddr_; }
  }
  
  public const int IpAddrV6FieldNumber = 49;
  private bool hasIpAddrV6;
  private pb::ByteString ipAddrV6_ = pb::ByteString.Empty;
  public bool HasIpAddrV6 {
    get { return hasIpAddrV6; }
  }
  public pb::ByteString IpAddrV6 {
    get { return ipAddrV6_; }
  }
  
  public const int SubPreLengthV6FieldNumber = 50;
  private bool hasSubPreLengthV6;
  private pb::ByteString subPreLengthV6_ = pb::ByteString.Empty;
  public bool HasSubPreLengthV6 {
    get { return hasSubPreLengthV6; }
  }
  public pb::ByteString SubPreLengthV6 {
    get { return subPreLengthV6_; }
  }
  
  public const int GatewayV6FieldNumber = 51;
  private bool hasGatewayV6;
  private pb::ByteString gatewayV6_ = pb::ByteString.Empty;
  public bool HasGatewayV6 {
    get { return hasGatewayV6; }
  }
  public pb::ByteString GatewayV6 {
    get { return gatewayV6_; }
  }
  
  public const int PrimaryDnsV6FieldNumber = 52;
  private bool hasPrimaryDnsV6;
  private pb::ByteString primaryDnsV6_ = pb::ByteString.Empty;
  public bool HasPrimaryDnsV6 {
    get { return hasPrimaryDnsV6; }
  }
  public pb::ByteString PrimaryDnsV6 {
    get { return primaryDnsV6_; }
  }
  
  public const int SecondaryDnsV6FieldNumber = 53;
  private bool hasSecondaryDnsV6;
  private pb::ByteString secondaryDnsV6_ = pb::ByteString.Empty;
  public bool HasSecondaryDnsV6 {
    get { return hasSecondaryDnsV6; }
  }
  public pb::ByteString SecondaryDnsV6 {
    get { return secondaryDnsV6_; }
  }
  
  public const int Eui64FieldNumber = 54;
  private bool hasEui64;
  private pb::ByteString eui64_ = pb::ByteString.Empty;
  public bool HasEui64 {
    get { return hasEui64; }
  }
  public pb::ByteString Eui64 {
    get { return eui64_; }
  }
  
  public const int HostNameFieldNumber = 55;
  private bool hasHostName;
  private string hostName_ = "";
  public bool HasHostName {
    get { return hasHostName; }
  }
  public string HostName {
    get { return hostName_; }
  }
  
  public const int DevicePortFieldNumber = 56;
  private bool hasDevicePort;
  private uint devicePort_;
  public bool HasDevicePort {
    get { return hasDevicePort; }
  }
  [global::System.CLSCompliant(false)]
  public uint DevicePort {
    get { return devicePort_; }
  }
  
  public const int FriendlyDeviceNameFieldNumber = 57;
  private bool hasFriendlyDeviceName;
  private string friendlyDeviceName_ = "";
  public bool HasFriendlyDeviceName {
    get { return hasFriendlyDeviceName; }
  }
  public string FriendlyDeviceName {
    get { return friendlyDeviceName_; }
  }
  
  public const int SsidFieldNumber = 58;
  private bool hasSsid;
  private string ssid_ = "";
  public bool HasSsid {
    get { return hasSsid; }
  }
  public string Ssid {
    get { return ssid_; }
  }
  
  public const int SsidStrengthFieldNumber = 59;
  private bool hasSsidStrength;
  private uint ssidStrength_;
  public bool HasSsidStrength {
    get { return hasSsidStrength; }
  }
  [global::System.CLSCompliant(false)]
  public uint SsidStrength {
    get { return ssidStrength_; }
  }
  
  public const int WifiSecurityModeFieldNumber = 60;
  private bool hasWifiSecurityMode;
  private uint wifiSecurityMode_;
  public bool HasWifiSecurityMode {
    get { return hasWifiSecurityMode; }
  }
  [global::System.CLSCompliant(false)]
  public uint WifiSecurityMode {
    get { return wifiSecurityMode_; }
  }
  
  public const int WifiInfModeFieldNumber = 61;
  private bool hasWifiInfMode;
  private uint wifiInfMode_;
  public bool HasWifiInfMode {
    get { return hasWifiInfMode; }
  }
  [global::System.CLSCompliant(false)]
  public uint WifiInfMode {
    get { return wifiInfMode_; }
  }
  
  public const int AvSsidFieldNumber = 62;
  private pbc::PopsicleList<string> avSsid_ = new pbc::PopsicleList<string>();
  public scg::IList<string> AvSsidList {
    get { return pbc::Lists.AsReadOnly(avSsid_); }
  }
  public int AvSsidCount {
    get { return avSsid_.Count; }
  }
  public string GetAvSsid(int index) {
    return avSsid_[index];
  }
  
  public const int AvSsidStrengthFieldNumber = 63;
  private pbc::PopsicleList<uint> avSsidStrength_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AvSsidStrengthList {
    get { return pbc::Lists.AsReadOnly(avSsidStrength_); }
  }
  public int AvSsidStrengthCount {
    get { return avSsidStrength_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAvSsidStrength(int index) {
    return avSsidStrength_[index];
  }
  
  public const int AvWifiSecurityModeFieldNumber = 64;
  private pbc::PopsicleList<uint> avWifiSecurityMode_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AvWifiSecurityModeList {
    get { return pbc::Lists.AsReadOnly(avWifiSecurityMode_); }
  }
  public int AvWifiSecurityModeCount {
    get { return avWifiSecurityMode_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAvWifiSecurityMode(int index) {
    return avWifiSecurityMode_[index];
  }
  
  public const int AvWifiInfModeFieldNumber = 65;
  private pbc::PopsicleList<uint> avWifiInfMode_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AvWifiInfModeList {
    get { return pbc::Lists.AsReadOnly(avWifiInfMode_); }
  }
  public int AvWifiInfModeCount {
    get { return avWifiInfMode_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAvWifiInfMode(int index) {
    return avWifiInfMode_[index];
  }
  
  public const int DevicePnFieldNumber = 66;
  private bool hasDevicePn;
  private string devicePn_ = "";
  public bool HasDevicePn {
    get { return hasDevicePn; }
  }
  public string DevicePn {
    get { return devicePn_; }
  }
  
  public const int DeviceHwRevFieldNumber = 67;
  private bool hasDeviceHwRev;
  private string deviceHwRev_ = "";
  public bool HasDeviceHwRev {
    get { return hasDeviceHwRev; }
  }
  public string DeviceHwRev {
    get { return deviceHwRev_; }
  }
  
  public const int DeviceFwRevFieldNumber = 68;
  private bool hasDeviceFwRev;
  private string deviceFwRev_ = "";
  public bool HasDeviceFwRev {
    get { return hasDeviceFwRev; }
  }
  public string DeviceFwRev {
    get { return deviceFwRev_; }
  }
  
  public const int DeviceSnFieldNumber = 69;
  private bool hasDeviceSn;
  private ulong deviceSn_;
  public bool HasDeviceSn {
    get { return hasDeviceSn; }
  }
  [global::System.CLSCompliant(false)]
  public ulong DeviceSn {
    get { return deviceSn_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _daqifiOutMessageFieldNames;
    if (hasMsgTimeStamp) {
      output.WriteUInt32(1, field_names[51], MsgTimeStamp);
    }
    if (analogInData_.Count > 0) {
      output.WriteSInt32Array(2, field_names[4], analogInData_);
    }
    if (analogInDataFloat_.Count > 0) {
      output.WriteFloatArray(3, field_names[5], analogInDataFloat_);
    }
    if (analogInDataTs_.Count > 0) {
      output.WriteUInt32Array(4, field_names[6], analogInDataTs_);
    }
    if (hasDigitalData) {
      output.WriteBytes(5, field_names[38], DigitalData);
    }
    if (digitalDataTs_.Count > 0) {
      output.WriteUInt32Array(6, field_names[39], digitalDataTs_);
    }
    if (analogOutData_.Count > 0) {
      output.WriteUInt32Array(7, field_names[21], analogOutData_);
    }
    if (hasDeviceStatus) {
      output.WriteUInt32(8, field_names[37], DeviceStatus);
    }
    if (hasPwrStatus) {
      output.WriteUInt32(9, field_names[55], PwrStatus);
    }
    if (hasBattStatus) {
      output.WriteUInt32(10, field_names[31], BattStatus);
    }
    if (hasTempStatus) {
      output.WriteSInt32(11, field_names[61], TempStatus);
    }
    if (hasTimestampFreq) {
      output.WriteUInt32(16, field_names[62], TimestampFreq);
    }
    if (hasAnalogInPortNum) {
      output.WriteUInt32(17, field_names[13], AnalogInPortNum);
    }
    if (hasAnalogInPortNumPriv) {
      output.WriteUInt32(18, field_names[14], AnalogInPortNumPriv);
    }
    if (hasAnalogInPortType) {
      output.WriteBytes(19, field_names[18], AnalogInPortType);
    }
    if (hasAnalogInPortAvRse) {
      output.WriteBytes(20, field_names[11], AnalogInPortAvRse);
    }
    if (hasAnalogInPortRse) {
      output.WriteBytes(21, field_names[17], AnalogInPortRse);
    }
    if (hasAnalogInPortEnabled) {
      output.WriteBytes(22, field_names[12], AnalogInPortEnabled);
    }
    if (analogInPortAvRange_.Count > 0) {
      output.WriteFloatArray(23, field_names[9], analogInPortAvRange_);
    }
    if (analogInPortAvRangePriv_.Count > 0) {
      output.WriteFloatArray(24, field_names[10], analogInPortAvRangePriv_);
    }
    if (analogInPortRange_.Count > 0) {
      output.WriteFloatArray(25, field_names[15], analogInPortRange_);
    }
    if (analogInPortRangePriv_.Count > 0) {
      output.WriteFloatArray(26, field_names[16], analogInPortRangePriv_);
    }
    if (hasAnalogInRes) {
      output.WriteUInt32(27, field_names[19], AnalogInRes);
    }
    if (hasAnalogInResPriv) {
      output.WriteUInt32(28, field_names[20], AnalogInResPriv);
    }
    if (analogInIntScaleM_.Count > 0) {
      output.WriteFloatArray(29, field_names[7], analogInIntScaleM_);
    }
    if (analogInIntScaleMPriv_.Count > 0) {
      output.WriteFloatArray(30, field_names[8], analogInIntScaleMPriv_);
    }
    if (analogInCalM_.Count > 0) {
      output.WriteFloatArray(31, field_names[2], analogInCalM_);
    }
    if (analogInCalB_.Count > 0) {
      output.WriteFloatArray(32, field_names[0], analogInCalB_);
    }
    if (analogInCalMPriv_.Count > 0) {
      output.WriteFloatArray(33, field_names[3], analogInCalMPriv_);
    }
    if (analogInCalBPriv_.Count > 0) {
      output.WriteFloatArray(34, field_names[1], analogInCalBPriv_);
    }
    if (hasDigitalPortNum) {
      output.WriteUInt32(35, field_names[41], DigitalPortNum);
    }
    if (hasDigitalPortType) {
      output.WriteBytes(36, field_names[42], DigitalPortType);
    }
    if (hasDigitalPortDir) {
      output.WriteBytes(37, field_names[40], DigitalPortDir);
    }
    if (hasAnalogOutPortNum) {
      output.WriteUInt32(38, field_names[23], AnalogOutPortNum);
    }
    if (hasAnalogOutPortType) {
      output.WriteBytes(39, field_names[25], AnalogOutPortType);
    }
    if (hasAnalogOutRes) {
      output.WriteUInt32(40, field_names[26], AnalogOutRes);
    }
    if (analogOutPortAvRange_.Count > 0) {
      output.WriteFloatArray(41, field_names[22], analogOutPortAvRange_);
    }
    if (hasAnalogOutPortRange) {
      output.WriteFloat(42, field_names[24], AnalogOutPortRange);
    }
    if (hasIpAddr) {
      output.WriteBytes(43, field_names[48], IpAddr);
    }
    if (hasNetMask) {
      output.WriteBytes(44, field_names[52], NetMask);
    }
    if (hasGateway) {
      output.WriteBytes(45, field_names[45], Gateway);
    }
    if (hasPrimaryDns) {
      output.WriteBytes(46, field_names[53], PrimaryDns);
    }
    if (hasSecondaryDns) {
      output.WriteBytes(47, field_names[56], SecondaryDns);
    }
    if (hasMacAddr) {
      output.WriteBytes(48, field_names[50], MacAddr);
    }
    if (hasIpAddrV6) {
      output.WriteBytes(49, field_names[49], IpAddrV6);
    }
    if (hasSubPreLengthV6) {
      output.WriteBytes(50, field_names[60], SubPreLengthV6);
    }
    if (hasGatewayV6) {
      output.WriteBytes(51, field_names[46], GatewayV6);
    }
    if (hasPrimaryDnsV6) {
      output.WriteBytes(52, field_names[54], PrimaryDnsV6);
    }
    if (hasSecondaryDnsV6) {
      output.WriteBytes(53, field_names[57], SecondaryDnsV6);
    }
    if (hasEui64) {
      output.WriteBytes(54, field_names[43], Eui64);
    }
    if (hasHostName) {
      output.WriteString(55, field_names[47], HostName);
    }
    if (hasDevicePort) {
      output.WriteUInt32(56, field_names[35], DevicePort);
    }
    if (hasFriendlyDeviceName) {
      output.WriteString(57, field_names[44], FriendlyDeviceName);
    }
    if (hasSsid) {
      output.WriteString(58, field_names[58], Ssid);
    }
    if (hasSsidStrength) {
      output.WriteUInt32(59, field_names[59], SsidStrength);
    }
    if (hasWifiSecurityMode) {
      output.WriteUInt32(60, field_names[64], WifiSecurityMode);
    }
    if (hasWifiInfMode) {
      output.WriteUInt32(61, field_names[63], WifiInfMode);
    }
    if (avSsid_.Count > 0) {
      output.WriteStringArray(62, field_names[27], avSsid_);
    }
    if (avSsidStrength_.Count > 0) {
      output.WriteUInt32Array(63, field_names[28], avSsidStrength_);
    }
    if (avWifiSecurityMode_.Count > 0) {
      output.WriteUInt32Array(64, field_names[30], avWifiSecurityMode_);
    }
    if (avWifiInfMode_.Count > 0) {
      output.WriteUInt32Array(65, field_names[29], avWifiInfMode_);
    }
    if (hasDevicePn) {
      output.WriteString(66, field_names[34], DevicePn);
    }
    if (hasDeviceHwRev) {
      output.WriteString(67, field_names[33], DeviceHwRev);
    }
    if (hasDeviceFwRev) {
      output.WriteString(68, field_names[32], DeviceFwRev);
    }
    if (hasDeviceSn) {
      output.WriteUInt64(69, field_names[36], DeviceSn);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMsgTimeStamp) {
      size += pb::CodedOutputStream.ComputeUInt32Size(1, MsgTimeStamp);
    }
    {
      int dataSize = 0;
      foreach (int element in AnalogInDataList) {
        dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * analogInData_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInDataFloat_.Count;
      size += dataSize;
      size += 1 * analogInDataFloat_.Count;
    }
    {
      int dataSize = 0;
      foreach (uint element in AnalogInDataTsList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * analogInDataTs_.Count;
    }
    if (hasDigitalData) {
      size += pb::CodedOutputStream.ComputeBytesSize(5, DigitalData);
    }
    {
      int dataSize = 0;
      foreach (uint element in DigitalDataTsList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * digitalDataTs_.Count;
    }
    {
      int dataSize = 0;
      foreach (uint element in AnalogOutDataList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * analogOutData_.Count;
    }
    if (hasDeviceStatus) {
      size += pb::CodedOutputStream.ComputeUInt32Size(8, DeviceStatus);
    }
    if (hasPwrStatus) {
      size += pb::CodedOutputStream.ComputeUInt32Size(9, PwrStatus);
    }
    if (hasBattStatus) {
      size += pb::CodedOutputStream.ComputeUInt32Size(10, BattStatus);
    }
    if (hasTempStatus) {
      size += pb::CodedOutputStream.ComputeSInt32Size(11, TempStatus);
    }
    if (hasTimestampFreq) {
      size += pb::CodedOutputStream.ComputeUInt32Size(16, TimestampFreq);
    }
    if (hasAnalogInPortNum) {
      size += pb::CodedOutputStream.ComputeUInt32Size(17, AnalogInPortNum);
    }
    if (hasAnalogInPortNumPriv) {
      size += pb::CodedOutputStream.ComputeUInt32Size(18, AnalogInPortNumPriv);
    }
    if (hasAnalogInPortType) {
      size += pb::CodedOutputStream.ComputeBytesSize(19, AnalogInPortType);
    }
    if (hasAnalogInPortAvRse) {
      size += pb::CodedOutputStream.ComputeBytesSize(20, AnalogInPortAvRse);
    }
    if (hasAnalogInPortRse) {
      size += pb::CodedOutputStream.ComputeBytesSize(21, AnalogInPortRse);
    }
    if (hasAnalogInPortEnabled) {
      size += pb::CodedOutputStream.ComputeBytesSize(22, AnalogInPortEnabled);
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInPortAvRange_.Count;
      size += dataSize;
      size += 2 * analogInPortAvRange_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInPortAvRangePriv_.Count;
      size += dataSize;
      size += 2 * analogInPortAvRangePriv_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInPortRange_.Count;
      size += dataSize;
      size += 2 * analogInPortRange_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInPortRangePriv_.Count;
      size += dataSize;
      size += 2 * analogInPortRangePriv_.Count;
    }
    if (hasAnalogInRes) {
      size += pb::CodedOutputStream.ComputeUInt32Size(27, AnalogInRes);
    }
    if (hasAnalogInResPriv) {
      size += pb::CodedOutputStream.ComputeUInt32Size(28, AnalogInResPriv);
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInIntScaleM_.Count;
      size += dataSize;
      size += 2 * analogInIntScaleM_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInIntScaleMPriv_.Count;
      size += dataSize;
      size += 2 * analogInIntScaleMPriv_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInCalM_.Count;
      size += dataSize;
      size += 2 * analogInCalM_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInCalB_.Count;
      size += dataSize;
      size += 2 * analogInCalB_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInCalMPriv_.Count;
      size += dataSize;
      size += 2 * analogInCalMPriv_.Count;
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogInCalBPriv_.Count;
      size += dataSize;
      size += 2 * analogInCalBPriv_.Count;
    }
    if (hasDigitalPortNum) {
      size += pb::CodedOutputStream.ComputeUInt32Size(35, DigitalPortNum);
    }
    if (hasDigitalPortType) {
      size += pb::CodedOutputStream.ComputeBytesSize(36, DigitalPortType);
    }
    if (hasDigitalPortDir) {
      size += pb::CodedOutputStream.ComputeBytesSize(37, DigitalPortDir);
    }
    if (hasAnalogOutPortNum) {
      size += pb::CodedOutputStream.ComputeUInt32Size(38, AnalogOutPortNum);
    }
    if (hasAnalogOutPortType) {
      size += pb::CodedOutputStream.ComputeBytesSize(39, AnalogOutPortType);
    }
    if (hasAnalogOutRes) {
      size += pb::CodedOutputStream.ComputeUInt32Size(40, AnalogOutRes);
    }
    {
      int dataSize = 0;
      dataSize = 4 * analogOutPortAvRange_.Count;
      size += dataSize;
      size += 2 * analogOutPortAvRange_.Count;
    }
    if (hasAnalogOutPortRange) {
      size += pb::CodedOutputStream.ComputeFloatSize(42, AnalogOutPortRange);
    }
    if (hasIpAddr) {
      size += pb::CodedOutputStream.ComputeBytesSize(43, IpAddr);
    }
    if (hasNetMask) {
      size += pb::CodedOutputStream.ComputeBytesSize(44, NetMask);
    }
    if (hasGateway) {
      size += pb::CodedOutputStream.ComputeBytesSize(45, Gateway);
    }
    if (hasPrimaryDns) {
      size += pb::CodedOutputStream.ComputeBytesSize(46, PrimaryDns);
    }
    if (hasSecondaryDns) {
      size += pb::CodedOutputStream.ComputeBytesSize(47, SecondaryDns);
    }
    if (hasMacAddr) {
      size += pb::CodedOutputStream.ComputeBytesSize(48, MacAddr);
    }
    if (hasIpAddrV6) {
      size += pb::CodedOutputStream.ComputeBytesSize(49, IpAddrV6);
    }
    if (hasSubPreLengthV6) {
      size += pb::CodedOutputStream.ComputeBytesSize(50, SubPreLengthV6);
    }
    if (hasGatewayV6) {
      size += pb::CodedOutputStream.ComputeBytesSize(51, GatewayV6);
    }
    if (hasPrimaryDnsV6) {
      size += pb::CodedOutputStream.ComputeBytesSize(52, PrimaryDnsV6);
    }
    if (hasSecondaryDnsV6) {
      size += pb::CodedOutputStream.ComputeBytesSize(53, SecondaryDnsV6);
    }
    if (hasEui64) {
      size += pb::CodedOutputStream.ComputeBytesSize(54, Eui64);
    }
    if (hasHostName) {
      size += pb::CodedOutputStream.ComputeStringSize(55, HostName);
    }
    if (hasDevicePort) {
      size += pb::CodedOutputStream.ComputeUInt32Size(56, DevicePort);
    }
    if (hasFriendlyDeviceName) {
      size += pb::CodedOutputStream.ComputeStringSize(57, FriendlyDeviceName);
    }
    if (hasSsid) {
      size += pb::CodedOutputStream.ComputeStringSize(58, Ssid);
    }
    if (hasSsidStrength) {
      size += pb::CodedOutputStream.ComputeUInt32Size(59, SsidStrength);
    }
    if (hasWifiSecurityMode) {
      size += pb::CodedOutputStream.ComputeUInt32Size(60, WifiSecurityMode);
    }
    if (hasWifiInfMode) {
      size += pb::CodedOutputStream.ComputeUInt32Size(61, WifiInfMode);
    }
    {
      int dataSize = 0;
      foreach (string element in AvSsidList) {
        dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 2 * avSsid_.Count;
    }
    {
      int dataSize = 0;
      foreach (uint element in AvSsidStrengthList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * avSsidStrength_.Count;
    }
    {
      int dataSize = 0;
      foreach (uint element in AvWifiSecurityModeList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * avWifiSecurityMode_.Count;
    }
    {
      int dataSize = 0;
      foreach (uint element in AvWifiInfModeList) {
        dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 2 * avWifiInfMode_.Count;
    }
    if (hasDevicePn) {
      size += pb::CodedOutputStream.ComputeStringSize(66, DevicePn);
    }
    if (hasDeviceHwRev) {
      size += pb::CodedOutputStream.ComputeStringSize(67, DeviceHwRev);
    }
    if (hasDeviceFwRev) {
      size += pb::CodedOutputStream.ComputeStringSize(68, DeviceFwRev);
    }
    if (hasDeviceSn) {
      size += pb::CodedOutputStream.ComputeUInt64Size(69, DeviceSn);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DaqifiOutMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DaqifiOutMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DaqifiOutMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DaqifiOutMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DaqifiOutMessage MakeReadOnly() {
    analogInData_.MakeReadOnly();
    analogInDataFloat_.MakeReadOnly();
    analogInDataTs_.MakeReadOnly();
    digitalDataTs_.MakeReadOnly();
    analogOutData_.MakeReadOnly();
    analogInPortAvRange_.MakeReadOnly();
    analogInPortAvRangePriv_.MakeReadOnly();
    analogInPortRange_.MakeReadOnly();
    analogInPortRangePriv_.MakeReadOnly();
    analogInIntScaleM_.MakeReadOnly();
    analogInIntScaleMPriv_.MakeReadOnly();
    analogInCalM_.MakeReadOnly();
    analogInCalB_.MakeReadOnly();
    analogInCalMPriv_.MakeReadOnly();
    analogInCalBPriv_.MakeReadOnly();
    analogOutPortAvRange_.MakeReadOnly();
    avSsid_.MakeReadOnly();
    avSsidStrength_.MakeReadOnly();
    avWifiSecurityMode_.MakeReadOnly();
    avWifiInfMode_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DaqifiOutMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DaqifiOutMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DaqifiOutMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DaqifiOutMessage result;
    
    private DaqifiOutMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        DaqifiOutMessage original = result;
        result = new DaqifiOutMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DaqifiOutMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DaqifiOutMessage.Descriptor; }
    }
    
    public override DaqifiOutMessage DefaultInstanceForType {
      get { return global::DaqifiOutMessage.DefaultInstance; }
    }
    
    public override DaqifiOutMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DaqifiOutMessage) {
        return MergeFrom((DaqifiOutMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DaqifiOutMessage other) {
      if (other == global::DaqifiOutMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsgTimeStamp) {
        MsgTimeStamp = other.MsgTimeStamp;
      }
      if (other.analogInData_.Count != 0) {
        result.analogInData_.Add(other.analogInData_);
      }
      if (other.analogInDataFloat_.Count != 0) {
        result.analogInDataFloat_.Add(other.analogInDataFloat_);
      }
      if (other.analogInDataTs_.Count != 0) {
        result.analogInDataTs_.Add(other.analogInDataTs_);
      }
      if (other.HasDigitalData) {
        DigitalData = other.DigitalData;
      }
      if (other.digitalDataTs_.Count != 0) {
        result.digitalDataTs_.Add(other.digitalDataTs_);
      }
      if (other.analogOutData_.Count != 0) {
        result.analogOutData_.Add(other.analogOutData_);
      }
      if (other.HasDeviceStatus) {
        DeviceStatus = other.DeviceStatus;
      }
      if (other.HasPwrStatus) {
        PwrStatus = other.PwrStatus;
      }
      if (other.HasBattStatus) {
        BattStatus = other.BattStatus;
      }
      if (other.HasTempStatus) {
        TempStatus = other.TempStatus;
      }
      if (other.HasTimestampFreq) {
        TimestampFreq = other.TimestampFreq;
      }
      if (other.HasAnalogInPortNum) {
        AnalogInPortNum = other.AnalogInPortNum;
      }
      if (other.HasAnalogInPortNumPriv) {
        AnalogInPortNumPriv = other.AnalogInPortNumPriv;
      }
      if (other.HasAnalogInPortType) {
        AnalogInPortType = other.AnalogInPortType;
      }
      if (other.HasAnalogInPortAvRse) {
        AnalogInPortAvRse = other.AnalogInPortAvRse;
      }
      if (other.HasAnalogInPortRse) {
        AnalogInPortRse = other.AnalogInPortRse;
      }
      if (other.HasAnalogInPortEnabled) {
        AnalogInPortEnabled = other.AnalogInPortEnabled;
      }
      if (other.analogInPortAvRange_.Count != 0) {
        result.analogInPortAvRange_.Add(other.analogInPortAvRange_);
      }
      if (other.analogInPortAvRangePriv_.Count != 0) {
        result.analogInPortAvRangePriv_.Add(other.analogInPortAvRangePriv_);
      }
      if (other.analogInPortRange_.Count != 0) {
        result.analogInPortRange_.Add(other.analogInPortRange_);
      }
      if (other.analogInPortRangePriv_.Count != 0) {
        result.analogInPortRangePriv_.Add(other.analogInPortRangePriv_);
      }
      if (other.HasAnalogInRes) {
        AnalogInRes = other.AnalogInRes;
      }
      if (other.HasAnalogInResPriv) {
        AnalogInResPriv = other.AnalogInResPriv;
      }
      if (other.analogInIntScaleM_.Count != 0) {
        result.analogInIntScaleM_.Add(other.analogInIntScaleM_);
      }
      if (other.analogInIntScaleMPriv_.Count != 0) {
        result.analogInIntScaleMPriv_.Add(other.analogInIntScaleMPriv_);
      }
      if (other.analogInCalM_.Count != 0) {
        result.analogInCalM_.Add(other.analogInCalM_);
      }
      if (other.analogInCalB_.Count != 0) {
        result.analogInCalB_.Add(other.analogInCalB_);
      }
      if (other.analogInCalMPriv_.Count != 0) {
        result.analogInCalMPriv_.Add(other.analogInCalMPriv_);
      }
      if (other.analogInCalBPriv_.Count != 0) {
        result.analogInCalBPriv_.Add(other.analogInCalBPriv_);
      }
      if (other.HasDigitalPortNum) {
        DigitalPortNum = other.DigitalPortNum;
      }
      if (other.HasDigitalPortType) {
        DigitalPortType = other.DigitalPortType;
      }
      if (other.HasDigitalPortDir) {
        DigitalPortDir = other.DigitalPortDir;
      }
      if (other.HasAnalogOutPortNum) {
        AnalogOutPortNum = other.AnalogOutPortNum;
      }
      if (other.HasAnalogOutPortType) {
        AnalogOutPortType = other.AnalogOutPortType;
      }
      if (other.HasAnalogOutRes) {
        AnalogOutRes = other.AnalogOutRes;
      }
      if (other.analogOutPortAvRange_.Count != 0) {
        result.analogOutPortAvRange_.Add(other.analogOutPortAvRange_);
      }
      if (other.HasAnalogOutPortRange) {
        AnalogOutPortRange = other.AnalogOutPortRange;
      }
      if (other.HasIpAddr) {
        IpAddr = other.IpAddr;
      }
      if (other.HasNetMask) {
        NetMask = other.NetMask;
      }
      if (other.HasGateway) {
        Gateway = other.Gateway;
      }
      if (other.HasPrimaryDns) {
        PrimaryDns = other.PrimaryDns;
      }
      if (other.HasSecondaryDns) {
        SecondaryDns = other.SecondaryDns;
      }
      if (other.HasMacAddr) {
        MacAddr = other.MacAddr;
      }
      if (other.HasIpAddrV6) {
        IpAddrV6 = other.IpAddrV6;
      }
      if (other.HasSubPreLengthV6) {
        SubPreLengthV6 = other.SubPreLengthV6;
      }
      if (other.HasGatewayV6) {
        GatewayV6 = other.GatewayV6;
      }
      if (other.HasPrimaryDnsV6) {
        PrimaryDnsV6 = other.PrimaryDnsV6;
      }
      if (other.HasSecondaryDnsV6) {
        SecondaryDnsV6 = other.SecondaryDnsV6;
      }
      if (other.HasEui64) {
        Eui64 = other.Eui64;
      }
      if (other.HasHostName) {
        HostName = other.HostName;
      }
      if (other.HasDevicePort) {
        DevicePort = other.DevicePort;
      }
      if (other.HasFriendlyDeviceName) {
        FriendlyDeviceName = other.FriendlyDeviceName;
      }
      if (other.HasSsid) {
        Ssid = other.Ssid;
      }
      if (other.HasSsidStrength) {
        SsidStrength = other.SsidStrength;
      }
      if (other.HasWifiSecurityMode) {
        WifiSecurityMode = other.WifiSecurityMode;
      }
      if (other.HasWifiInfMode) {
        WifiInfMode = other.WifiInfMode;
      }
      if (other.avSsid_.Count != 0) {
        result.avSsid_.Add(other.avSsid_);
      }
      if (other.avSsidStrength_.Count != 0) {
        result.avSsidStrength_.Add(other.avSsidStrength_);
      }
      if (other.avWifiSecurityMode_.Count != 0) {
        result.avWifiSecurityMode_.Add(other.avWifiSecurityMode_);
      }
      if (other.avWifiInfMode_.Count != 0) {
        result.avWifiInfMode_.Add(other.avWifiInfMode_);
      }
      if (other.HasDevicePn) {
        DevicePn = other.DevicePn;
      }
      if (other.HasDeviceHwRev) {
        DeviceHwRev = other.DeviceHwRev;
      }
      if (other.HasDeviceFwRev) {
        DeviceFwRev = other.DeviceFwRev;
      }
      if (other.HasDeviceSn) {
        DeviceSn = other.DeviceSn;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_daqifiOutMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _daqifiOutMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMsgTimeStamp = input.ReadUInt32(ref result.msgTimeStamp_);
            break;
          }
          case 18:
          case 16: {
            input.ReadSInt32Array(tag, field_name, result.analogInData_);
            break;
          }
          case 26:
          case 29: {
            input.ReadFloatArray(tag, field_name, result.analogInDataFloat_);
            break;
          }
          case 34:
          case 32: {
            input.ReadUInt32Array(tag, field_name, result.analogInDataTs_);
            break;
          }
          case 42: {
            result.hasDigitalData = input.ReadBytes(ref result.digitalData_);
            break;
          }
          case 50:
          case 48: {
            input.ReadUInt32Array(tag, field_name, result.digitalDataTs_);
            break;
          }
          case 58:
          case 56: {
            input.ReadUInt32Array(tag, field_name, result.analogOutData_);
            break;
          }
          case 64: {
            result.hasDeviceStatus = input.ReadUInt32(ref result.deviceStatus_);
            break;
          }
          case 72: {
            result.hasPwrStatus = input.ReadUInt32(ref result.pwrStatus_);
            break;
          }
          case 80: {
            result.hasBattStatus = input.ReadUInt32(ref result.battStatus_);
            break;
          }
          case 88: {
            result.hasTempStatus = input.ReadSInt32(ref result.tempStatus_);
            break;
          }
          case 128: {
            result.hasTimestampFreq = input.ReadUInt32(ref result.timestampFreq_);
            break;
          }
          case 136: {
            result.hasAnalogInPortNum = input.ReadUInt32(ref result.analogInPortNum_);
            break;
          }
          case 144: {
            result.hasAnalogInPortNumPriv = input.ReadUInt32(ref result.analogInPortNumPriv_);
            break;
          }
          case 154: {
            result.hasAnalogInPortType = input.ReadBytes(ref result.analogInPortType_);
            break;
          }
          case 162: {
            result.hasAnalogInPortAvRse = input.ReadBytes(ref result.analogInPortAvRse_);
            break;
          }
          case 170: {
            result.hasAnalogInPortRse = input.ReadBytes(ref result.analogInPortRse_);
            break;
          }
          case 178: {
            result.hasAnalogInPortEnabled = input.ReadBytes(ref result.analogInPortEnabled_);
            break;
          }
          case 186:
          case 189: {
            input.ReadFloatArray(tag, field_name, result.analogInPortAvRange_);
            break;
          }
          case 194:
          case 197: {
            input.ReadFloatArray(tag, field_name, result.analogInPortAvRangePriv_);
            break;
          }
          case 202:
          case 205: {
            input.ReadFloatArray(tag, field_name, result.analogInPortRange_);
            break;
          }
          case 210:
          case 213: {
            input.ReadFloatArray(tag, field_name, result.analogInPortRangePriv_);
            break;
          }
          case 216: {
            result.hasAnalogInRes = input.ReadUInt32(ref result.analogInRes_);
            break;
          }
          case 224: {
            result.hasAnalogInResPriv = input.ReadUInt32(ref result.analogInResPriv_);
            break;
          }
          case 234:
          case 237: {
            input.ReadFloatArray(tag, field_name, result.analogInIntScaleM_);
            break;
          }
          case 242:
          case 245: {
            input.ReadFloatArray(tag, field_name, result.analogInIntScaleMPriv_);
            break;
          }
          case 250:
          case 253: {
            input.ReadFloatArray(tag, field_name, result.analogInCalM_);
            break;
          }
          case 258:
          case 261: {
            input.ReadFloatArray(tag, field_name, result.analogInCalB_);
            break;
          }
          case 266:
          case 269: {
            input.ReadFloatArray(tag, field_name, result.analogInCalMPriv_);
            break;
          }
          case 274:
          case 277: {
            input.ReadFloatArray(tag, field_name, result.analogInCalBPriv_);
            break;
          }
          case 280: {
            result.hasDigitalPortNum = input.ReadUInt32(ref result.digitalPortNum_);
            break;
          }
          case 290: {
            result.hasDigitalPortType = input.ReadBytes(ref result.digitalPortType_);
            break;
          }
          case 298: {
            result.hasDigitalPortDir = input.ReadBytes(ref result.digitalPortDir_);
            break;
          }
          case 304: {
            result.hasAnalogOutPortNum = input.ReadUInt32(ref result.analogOutPortNum_);
            break;
          }
          case 314: {
            result.hasAnalogOutPortType = input.ReadBytes(ref result.analogOutPortType_);
            break;
          }
          case 320: {
            result.hasAnalogOutRes = input.ReadUInt32(ref result.analogOutRes_);
            break;
          }
          case 330:
          case 333: {
            input.ReadFloatArray(tag, field_name, result.analogOutPortAvRange_);
            break;
          }
          case 341: {
            result.hasAnalogOutPortRange = input.ReadFloat(ref result.analogOutPortRange_);
            break;
          }
          case 346: {
            result.hasIpAddr = input.ReadBytes(ref result.ipAddr_);
            break;
          }
          case 354: {
            result.hasNetMask = input.ReadBytes(ref result.netMask_);
            break;
          }
          case 362: {
            result.hasGateway = input.ReadBytes(ref result.gateway_);
            break;
          }
          case 370: {
            result.hasPrimaryDns = input.ReadBytes(ref result.primaryDns_);
            break;
          }
          case 378: {
            result.hasSecondaryDns = input.ReadBytes(ref result.secondaryDns_);
            break;
          }
          case 386: {
            result.hasMacAddr = input.ReadBytes(ref result.macAddr_);
            break;
          }
          case 394: {
            result.hasIpAddrV6 = input.ReadBytes(ref result.ipAddrV6_);
            break;
          }
          case 402: {
            result.hasSubPreLengthV6 = input.ReadBytes(ref result.subPreLengthV6_);
            break;
          }
          case 410: {
            result.hasGatewayV6 = input.ReadBytes(ref result.gatewayV6_);
            break;
          }
          case 418: {
            result.hasPrimaryDnsV6 = input.ReadBytes(ref result.primaryDnsV6_);
            break;
          }
          case 426: {
            result.hasSecondaryDnsV6 = input.ReadBytes(ref result.secondaryDnsV6_);
            break;
          }
          case 434: {
            result.hasEui64 = input.ReadBytes(ref result.eui64_);
            break;
          }
          case 442: {
            result.hasHostName = input.ReadString(ref result.hostName_);
            break;
          }
          case 448: {
            result.hasDevicePort = input.ReadUInt32(ref result.devicePort_);
            break;
          }
          case 458: {
            result.hasFriendlyDeviceName = input.ReadString(ref result.friendlyDeviceName_);
            break;
          }
          case 466: {
            result.hasSsid = input.ReadString(ref result.ssid_);
            break;
          }
          case 472: {
            result.hasSsidStrength = input.ReadUInt32(ref result.ssidStrength_);
            break;
          }
          case 480: {
            result.hasWifiSecurityMode = input.ReadUInt32(ref result.wifiSecurityMode_);
            break;
          }
          case 488: {
            result.hasWifiInfMode = input.ReadUInt32(ref result.wifiInfMode_);
            break;
          }
          case 498: {
            input.ReadStringArray(tag, field_name, result.avSsid_);
            break;
          }
          case 506:
          case 504: {
            input.ReadUInt32Array(tag, field_name, result.avSsidStrength_);
            break;
          }
          case 514:
          case 512: {
            input.ReadUInt32Array(tag, field_name, result.avWifiSecurityMode_);
            break;
          }
          case 522:
          case 520: {
            input.ReadUInt32Array(tag, field_name, result.avWifiInfMode_);
            break;
          }
          case 530: {
            result.hasDevicePn = input.ReadString(ref result.devicePn_);
            break;
          }
          case 538: {
            result.hasDeviceHwRev = input.ReadString(ref result.deviceHwRev_);
            break;
          }
          case 546: {
            result.hasDeviceFwRev = input.ReadString(ref result.deviceFwRev_);
            break;
          }
          case 552: {
            result.hasDeviceSn = input.ReadUInt64(ref result.deviceSn_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsgTimeStamp {
      get { return result.hasMsgTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint MsgTimeStamp {
      get { return result.MsgTimeStamp; }
      set { SetMsgTimeStamp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMsgTimeStamp(uint value) {
      PrepareBuilder();
      result.hasMsgTimeStamp = true;
      result.msgTimeStamp_ = value;
      return this;
    }
    public Builder ClearMsgTimeStamp() {
      PrepareBuilder();
      result.hasMsgTimeStamp = false;
      result.msgTimeStamp_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> AnalogInDataList {
      get { return PrepareBuilder().analogInData_; }
    }
    public int AnalogInDataCount {
      get { return result.AnalogInDataCount; }
    }
    public int GetAnalogInData(int index) {
      return result.GetAnalogInData(index);
    }
    public Builder SetAnalogInData(int index, int value) {
      PrepareBuilder();
      result.analogInData_[index] = value;
      return this;
    }
    public Builder AddAnalogInData(int value) {
      PrepareBuilder();
      result.analogInData_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInData(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.analogInData_.Add(values);
      return this;
    }
    public Builder ClearAnalogInData() {
      PrepareBuilder();
      result.analogInData_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInDataFloatList {
      get { return PrepareBuilder().analogInDataFloat_; }
    }
    public int AnalogInDataFloatCount {
      get { return result.AnalogInDataFloatCount; }
    }
    public float GetAnalogInDataFloat(int index) {
      return result.GetAnalogInDataFloat(index);
    }
    public Builder SetAnalogInDataFloat(int index, float value) {
      PrepareBuilder();
      result.analogInDataFloat_[index] = value;
      return this;
    }
    public Builder AddAnalogInDataFloat(float value) {
      PrepareBuilder();
      result.analogInDataFloat_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInDataFloat(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInDataFloat_.Add(values);
      return this;
    }
    public Builder ClearAnalogInDataFloat() {
      PrepareBuilder();
      result.analogInDataFloat_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AnalogInDataTsList {
      get { return PrepareBuilder().analogInDataTs_; }
    }
    public int AnalogInDataTsCount {
      get { return result.AnalogInDataTsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAnalogInDataTs(int index) {
      return result.GetAnalogInDataTs(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogInDataTs(int index, uint value) {
      PrepareBuilder();
      result.analogInDataTs_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAnalogInDataTs(uint value) {
      PrepareBuilder();
      result.analogInDataTs_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAnalogInDataTs(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.analogInDataTs_.Add(values);
      return this;
    }
    public Builder ClearAnalogInDataTs() {
      PrepareBuilder();
      result.analogInDataTs_.Clear();
      return this;
    }
    
    public bool HasDigitalData {
      get { return result.hasDigitalData; }
    }
    public pb::ByteString DigitalData {
      get { return result.DigitalData; }
      set { SetDigitalData(value); }
    }
    public Builder SetDigitalData(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDigitalData = true;
      result.digitalData_ = value;
      return this;
    }
    public Builder ClearDigitalData() {
      PrepareBuilder();
      result.hasDigitalData = false;
      result.digitalData_ = pb::ByteString.Empty;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> DigitalDataTsList {
      get { return PrepareBuilder().digitalDataTs_; }
    }
    public int DigitalDataTsCount {
      get { return result.DigitalDataTsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetDigitalDataTs(int index) {
      return result.GetDigitalDataTs(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDigitalDataTs(int index, uint value) {
      PrepareBuilder();
      result.digitalDataTs_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddDigitalDataTs(uint value) {
      PrepareBuilder();
      result.digitalDataTs_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeDigitalDataTs(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.digitalDataTs_.Add(values);
      return this;
    }
    public Builder ClearDigitalDataTs() {
      PrepareBuilder();
      result.digitalDataTs_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AnalogOutDataList {
      get { return PrepareBuilder().analogOutData_; }
    }
    public int AnalogOutDataCount {
      get { return result.AnalogOutDataCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAnalogOutData(int index) {
      return result.GetAnalogOutData(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogOutData(int index, uint value) {
      PrepareBuilder();
      result.analogOutData_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAnalogOutData(uint value) {
      PrepareBuilder();
      result.analogOutData_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAnalogOutData(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.analogOutData_.Add(values);
      return this;
    }
    public Builder ClearAnalogOutData() {
      PrepareBuilder();
      result.analogOutData_.Clear();
      return this;
    }
    
    public bool HasDeviceStatus {
      get { return result.hasDeviceStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint DeviceStatus {
      get { return result.DeviceStatus; }
      set { SetDeviceStatus(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDeviceStatus(uint value) {
      PrepareBuilder();
      result.hasDeviceStatus = true;
      result.deviceStatus_ = value;
      return this;
    }
    public Builder ClearDeviceStatus() {
      PrepareBuilder();
      result.hasDeviceStatus = false;
      result.deviceStatus_ = 0;
      return this;
    }
    
    public bool HasPwrStatus {
      get { return result.hasPwrStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint PwrStatus {
      get { return result.PwrStatus; }
      set { SetPwrStatus(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPwrStatus(uint value) {
      PrepareBuilder();
      result.hasPwrStatus = true;
      result.pwrStatus_ = value;
      return this;
    }
    public Builder ClearPwrStatus() {
      PrepareBuilder();
      result.hasPwrStatus = false;
      result.pwrStatus_ = 0;
      return this;
    }
    
    public bool HasBattStatus {
      get { return result.hasBattStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint BattStatus {
      get { return result.BattStatus; }
      set { SetBattStatus(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBattStatus(uint value) {
      PrepareBuilder();
      result.hasBattStatus = true;
      result.battStatus_ = value;
      return this;
    }
    public Builder ClearBattStatus() {
      PrepareBuilder();
      result.hasBattStatus = false;
      result.battStatus_ = 0;
      return this;
    }
    
    public bool HasTempStatus {
      get { return result.hasTempStatus; }
    }
    public int TempStatus {
      get { return result.TempStatus; }
      set { SetTempStatus(value); }
    }
    public Builder SetTempStatus(int value) {
      PrepareBuilder();
      result.hasTempStatus = true;
      result.tempStatus_ = value;
      return this;
    }
    public Builder ClearTempStatus() {
      PrepareBuilder();
      result.hasTempStatus = false;
      result.tempStatus_ = 0;
      return this;
    }
    
    public bool HasTimestampFreq {
      get { return result.hasTimestampFreq; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimestampFreq {
      get { return result.TimestampFreq; }
      set { SetTimestampFreq(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTimestampFreq(uint value) {
      PrepareBuilder();
      result.hasTimestampFreq = true;
      result.timestampFreq_ = value;
      return this;
    }
    public Builder ClearTimestampFreq() {
      PrepareBuilder();
      result.hasTimestampFreq = false;
      result.timestampFreq_ = 0;
      return this;
    }
    
    public bool HasAnalogInPortNum {
      get { return result.hasAnalogInPortNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogInPortNum {
      get { return result.AnalogInPortNum; }
      set { SetAnalogInPortNum(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogInPortNum(uint value) {
      PrepareBuilder();
      result.hasAnalogInPortNum = true;
      result.analogInPortNum_ = value;
      return this;
    }
    public Builder ClearAnalogInPortNum() {
      PrepareBuilder();
      result.hasAnalogInPortNum = false;
      result.analogInPortNum_ = 0;
      return this;
    }
    
    public bool HasAnalogInPortNumPriv {
      get { return result.hasAnalogInPortNumPriv; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogInPortNumPriv {
      get { return result.AnalogInPortNumPriv; }
      set { SetAnalogInPortNumPriv(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogInPortNumPriv(uint value) {
      PrepareBuilder();
      result.hasAnalogInPortNumPriv = true;
      result.analogInPortNumPriv_ = value;
      return this;
    }
    public Builder ClearAnalogInPortNumPriv() {
      PrepareBuilder();
      result.hasAnalogInPortNumPriv = false;
      result.analogInPortNumPriv_ = 0;
      return this;
    }
    
    public bool HasAnalogInPortType {
      get { return result.hasAnalogInPortType; }
    }
    public pb::ByteString AnalogInPortType {
      get { return result.AnalogInPortType; }
      set { SetAnalogInPortType(value); }
    }
    public Builder SetAnalogInPortType(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogInPortType = true;
      result.analogInPortType_ = value;
      return this;
    }
    public Builder ClearAnalogInPortType() {
      PrepareBuilder();
      result.hasAnalogInPortType = false;
      result.analogInPortType_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogInPortAvRse {
      get { return result.hasAnalogInPortAvRse; }
    }
    public pb::ByteString AnalogInPortAvRse {
      get { return result.AnalogInPortAvRse; }
      set { SetAnalogInPortAvRse(value); }
    }
    public Builder SetAnalogInPortAvRse(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogInPortAvRse = true;
      result.analogInPortAvRse_ = value;
      return this;
    }
    public Builder ClearAnalogInPortAvRse() {
      PrepareBuilder();
      result.hasAnalogInPortAvRse = false;
      result.analogInPortAvRse_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogInPortRse {
      get { return result.hasAnalogInPortRse; }
    }
    public pb::ByteString AnalogInPortRse {
      get { return result.AnalogInPortRse; }
      set { SetAnalogInPortRse(value); }
    }
    public Builder SetAnalogInPortRse(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogInPortRse = true;
      result.analogInPortRse_ = value;
      return this;
    }
    public Builder ClearAnalogInPortRse() {
      PrepareBuilder();
      result.hasAnalogInPortRse = false;
      result.analogInPortRse_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogInPortEnabled {
      get { return result.hasAnalogInPortEnabled; }
    }
    public pb::ByteString AnalogInPortEnabled {
      get { return result.AnalogInPortEnabled; }
      set { SetAnalogInPortEnabled(value); }
    }
    public Builder SetAnalogInPortEnabled(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogInPortEnabled = true;
      result.analogInPortEnabled_ = value;
      return this;
    }
    public Builder ClearAnalogInPortEnabled() {
      PrepareBuilder();
      result.hasAnalogInPortEnabled = false;
      result.analogInPortEnabled_ = pb::ByteString.Empty;
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInPortAvRangeList {
      get { return PrepareBuilder().analogInPortAvRange_; }
    }
    public int AnalogInPortAvRangeCount {
      get { return result.AnalogInPortAvRangeCount; }
    }
    public float GetAnalogInPortAvRange(int index) {
      return result.GetAnalogInPortAvRange(index);
    }
    public Builder SetAnalogInPortAvRange(int index, float value) {
      PrepareBuilder();
      result.analogInPortAvRange_[index] = value;
      return this;
    }
    public Builder AddAnalogInPortAvRange(float value) {
      PrepareBuilder();
      result.analogInPortAvRange_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInPortAvRange(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInPortAvRange_.Add(values);
      return this;
    }
    public Builder ClearAnalogInPortAvRange() {
      PrepareBuilder();
      result.analogInPortAvRange_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInPortAvRangePrivList {
      get { return PrepareBuilder().analogInPortAvRangePriv_; }
    }
    public int AnalogInPortAvRangePrivCount {
      get { return result.AnalogInPortAvRangePrivCount; }
    }
    public float GetAnalogInPortAvRangePriv(int index) {
      return result.GetAnalogInPortAvRangePriv(index);
    }
    public Builder SetAnalogInPortAvRangePriv(int index, float value) {
      PrepareBuilder();
      result.analogInPortAvRangePriv_[index] = value;
      return this;
    }
    public Builder AddAnalogInPortAvRangePriv(float value) {
      PrepareBuilder();
      result.analogInPortAvRangePriv_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInPortAvRangePriv(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInPortAvRangePriv_.Add(values);
      return this;
    }
    public Builder ClearAnalogInPortAvRangePriv() {
      PrepareBuilder();
      result.analogInPortAvRangePriv_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInPortRangeList {
      get { return PrepareBuilder().analogInPortRange_; }
    }
    public int AnalogInPortRangeCount {
      get { return result.AnalogInPortRangeCount; }
    }
    public float GetAnalogInPortRange(int index) {
      return result.GetAnalogInPortRange(index);
    }
    public Builder SetAnalogInPortRange(int index, float value) {
      PrepareBuilder();
      result.analogInPortRange_[index] = value;
      return this;
    }
    public Builder AddAnalogInPortRange(float value) {
      PrepareBuilder();
      result.analogInPortRange_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInPortRange(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInPortRange_.Add(values);
      return this;
    }
    public Builder ClearAnalogInPortRange() {
      PrepareBuilder();
      result.analogInPortRange_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInPortRangePrivList {
      get { return PrepareBuilder().analogInPortRangePriv_; }
    }
    public int AnalogInPortRangePrivCount {
      get { return result.AnalogInPortRangePrivCount; }
    }
    public float GetAnalogInPortRangePriv(int index) {
      return result.GetAnalogInPortRangePriv(index);
    }
    public Builder SetAnalogInPortRangePriv(int index, float value) {
      PrepareBuilder();
      result.analogInPortRangePriv_[index] = value;
      return this;
    }
    public Builder AddAnalogInPortRangePriv(float value) {
      PrepareBuilder();
      result.analogInPortRangePriv_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInPortRangePriv(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInPortRangePriv_.Add(values);
      return this;
    }
    public Builder ClearAnalogInPortRangePriv() {
      PrepareBuilder();
      result.analogInPortRangePriv_.Clear();
      return this;
    }
    
    public bool HasAnalogInRes {
      get { return result.hasAnalogInRes; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogInRes {
      get { return result.AnalogInRes; }
      set { SetAnalogInRes(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogInRes(uint value) {
      PrepareBuilder();
      result.hasAnalogInRes = true;
      result.analogInRes_ = value;
      return this;
    }
    public Builder ClearAnalogInRes() {
      PrepareBuilder();
      result.hasAnalogInRes = false;
      result.analogInRes_ = 0;
      return this;
    }
    
    public bool HasAnalogInResPriv {
      get { return result.hasAnalogInResPriv; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogInResPriv {
      get { return result.AnalogInResPriv; }
      set { SetAnalogInResPriv(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogInResPriv(uint value) {
      PrepareBuilder();
      result.hasAnalogInResPriv = true;
      result.analogInResPriv_ = value;
      return this;
    }
    public Builder ClearAnalogInResPriv() {
      PrepareBuilder();
      result.hasAnalogInResPriv = false;
      result.analogInResPriv_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInIntScaleMList {
      get { return PrepareBuilder().analogInIntScaleM_; }
    }
    public int AnalogInIntScaleMCount {
      get { return result.AnalogInIntScaleMCount; }
    }
    public float GetAnalogInIntScaleM(int index) {
      return result.GetAnalogInIntScaleM(index);
    }
    public Builder SetAnalogInIntScaleM(int index, float value) {
      PrepareBuilder();
      result.analogInIntScaleM_[index] = value;
      return this;
    }
    public Builder AddAnalogInIntScaleM(float value) {
      PrepareBuilder();
      result.analogInIntScaleM_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInIntScaleM(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInIntScaleM_.Add(values);
      return this;
    }
    public Builder ClearAnalogInIntScaleM() {
      PrepareBuilder();
      result.analogInIntScaleM_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInIntScaleMPrivList {
      get { return PrepareBuilder().analogInIntScaleMPriv_; }
    }
    public int AnalogInIntScaleMPrivCount {
      get { return result.AnalogInIntScaleMPrivCount; }
    }
    public float GetAnalogInIntScaleMPriv(int index) {
      return result.GetAnalogInIntScaleMPriv(index);
    }
    public Builder SetAnalogInIntScaleMPriv(int index, float value) {
      PrepareBuilder();
      result.analogInIntScaleMPriv_[index] = value;
      return this;
    }
    public Builder AddAnalogInIntScaleMPriv(float value) {
      PrepareBuilder();
      result.analogInIntScaleMPriv_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInIntScaleMPriv(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInIntScaleMPriv_.Add(values);
      return this;
    }
    public Builder ClearAnalogInIntScaleMPriv() {
      PrepareBuilder();
      result.analogInIntScaleMPriv_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInCalMList {
      get { return PrepareBuilder().analogInCalM_; }
    }
    public int AnalogInCalMCount {
      get { return result.AnalogInCalMCount; }
    }
    public float GetAnalogInCalM(int index) {
      return result.GetAnalogInCalM(index);
    }
    public Builder SetAnalogInCalM(int index, float value) {
      PrepareBuilder();
      result.analogInCalM_[index] = value;
      return this;
    }
    public Builder AddAnalogInCalM(float value) {
      PrepareBuilder();
      result.analogInCalM_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInCalM(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInCalM_.Add(values);
      return this;
    }
    public Builder ClearAnalogInCalM() {
      PrepareBuilder();
      result.analogInCalM_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInCalBList {
      get { return PrepareBuilder().analogInCalB_; }
    }
    public int AnalogInCalBCount {
      get { return result.AnalogInCalBCount; }
    }
    public float GetAnalogInCalB(int index) {
      return result.GetAnalogInCalB(index);
    }
    public Builder SetAnalogInCalB(int index, float value) {
      PrepareBuilder();
      result.analogInCalB_[index] = value;
      return this;
    }
    public Builder AddAnalogInCalB(float value) {
      PrepareBuilder();
      result.analogInCalB_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInCalB(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInCalB_.Add(values);
      return this;
    }
    public Builder ClearAnalogInCalB() {
      PrepareBuilder();
      result.analogInCalB_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInCalMPrivList {
      get { return PrepareBuilder().analogInCalMPriv_; }
    }
    public int AnalogInCalMPrivCount {
      get { return result.AnalogInCalMPrivCount; }
    }
    public float GetAnalogInCalMPriv(int index) {
      return result.GetAnalogInCalMPriv(index);
    }
    public Builder SetAnalogInCalMPriv(int index, float value) {
      PrepareBuilder();
      result.analogInCalMPriv_[index] = value;
      return this;
    }
    public Builder AddAnalogInCalMPriv(float value) {
      PrepareBuilder();
      result.analogInCalMPriv_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInCalMPriv(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInCalMPriv_.Add(values);
      return this;
    }
    public Builder ClearAnalogInCalMPriv() {
      PrepareBuilder();
      result.analogInCalMPriv_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogInCalBPrivList {
      get { return PrepareBuilder().analogInCalBPriv_; }
    }
    public int AnalogInCalBPrivCount {
      get { return result.AnalogInCalBPrivCount; }
    }
    public float GetAnalogInCalBPriv(int index) {
      return result.GetAnalogInCalBPriv(index);
    }
    public Builder SetAnalogInCalBPriv(int index, float value) {
      PrepareBuilder();
      result.analogInCalBPriv_[index] = value;
      return this;
    }
    public Builder AddAnalogInCalBPriv(float value) {
      PrepareBuilder();
      result.analogInCalBPriv_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInCalBPriv(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogInCalBPriv_.Add(values);
      return this;
    }
    public Builder ClearAnalogInCalBPriv() {
      PrepareBuilder();
      result.analogInCalBPriv_.Clear();
      return this;
    }
    
    public bool HasDigitalPortNum {
      get { return result.hasDigitalPortNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint DigitalPortNum {
      get { return result.DigitalPortNum; }
      set { SetDigitalPortNum(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDigitalPortNum(uint value) {
      PrepareBuilder();
      result.hasDigitalPortNum = true;
      result.digitalPortNum_ = value;
      return this;
    }
    public Builder ClearDigitalPortNum() {
      PrepareBuilder();
      result.hasDigitalPortNum = false;
      result.digitalPortNum_ = 0;
      return this;
    }
    
    public bool HasDigitalPortType {
      get { return result.hasDigitalPortType; }
    }
    public pb::ByteString DigitalPortType {
      get { return result.DigitalPortType; }
      set { SetDigitalPortType(value); }
    }
    public Builder SetDigitalPortType(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDigitalPortType = true;
      result.digitalPortType_ = value;
      return this;
    }
    public Builder ClearDigitalPortType() {
      PrepareBuilder();
      result.hasDigitalPortType = false;
      result.digitalPortType_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasDigitalPortDir {
      get { return result.hasDigitalPortDir; }
    }
    public pb::ByteString DigitalPortDir {
      get { return result.DigitalPortDir; }
      set { SetDigitalPortDir(value); }
    }
    public Builder SetDigitalPortDir(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDigitalPortDir = true;
      result.digitalPortDir_ = value;
      return this;
    }
    public Builder ClearDigitalPortDir() {
      PrepareBuilder();
      result.hasDigitalPortDir = false;
      result.digitalPortDir_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogOutPortNum {
      get { return result.hasAnalogOutPortNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogOutPortNum {
      get { return result.AnalogOutPortNum; }
      set { SetAnalogOutPortNum(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogOutPortNum(uint value) {
      PrepareBuilder();
      result.hasAnalogOutPortNum = true;
      result.analogOutPortNum_ = value;
      return this;
    }
    public Builder ClearAnalogOutPortNum() {
      PrepareBuilder();
      result.hasAnalogOutPortNum = false;
      result.analogOutPortNum_ = 0;
      return this;
    }
    
    public bool HasAnalogOutPortType {
      get { return result.hasAnalogOutPortType; }
    }
    public pb::ByteString AnalogOutPortType {
      get { return result.AnalogOutPortType; }
      set { SetAnalogOutPortType(value); }
    }
    public Builder SetAnalogOutPortType(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogOutPortType = true;
      result.analogOutPortType_ = value;
      return this;
    }
    public Builder ClearAnalogOutPortType() {
      PrepareBuilder();
      result.hasAnalogOutPortType = false;
      result.analogOutPortType_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogOutRes {
      get { return result.hasAnalogOutRes; }
    }
    [global::System.CLSCompliant(false)]
    public uint AnalogOutRes {
      get { return result.AnalogOutRes; }
      set { SetAnalogOutRes(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAnalogOutRes(uint value) {
      PrepareBuilder();
      result.hasAnalogOutRes = true;
      result.analogOutRes_ = value;
      return this;
    }
    public Builder ClearAnalogOutRes() {
      PrepareBuilder();
      result.hasAnalogOutRes = false;
      result.analogOutRes_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<float> AnalogOutPortAvRangeList {
      get { return PrepareBuilder().analogOutPortAvRange_; }
    }
    public int AnalogOutPortAvRangeCount {
      get { return result.AnalogOutPortAvRangeCount; }
    }
    public float GetAnalogOutPortAvRange(int index) {
      return result.GetAnalogOutPortAvRange(index);
    }
    public Builder SetAnalogOutPortAvRange(int index, float value) {
      PrepareBuilder();
      result.analogOutPortAvRange_[index] = value;
      return this;
    }
    public Builder AddAnalogOutPortAvRange(float value) {
      PrepareBuilder();
      result.analogOutPortAvRange_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogOutPortAvRange(scg::IEnumerable<float> values) {
      PrepareBuilder();
      result.analogOutPortAvRange_.Add(values);
      return this;
    }
    public Builder ClearAnalogOutPortAvRange() {
      PrepareBuilder();
      result.analogOutPortAvRange_.Clear();
      return this;
    }
    
    public bool HasAnalogOutPortRange {
      get { return result.hasAnalogOutPortRange; }
    }
    public float AnalogOutPortRange {
      get { return result.AnalogOutPortRange; }
      set { SetAnalogOutPortRange(value); }
    }
    public Builder SetAnalogOutPortRange(float value) {
      PrepareBuilder();
      result.hasAnalogOutPortRange = true;
      result.analogOutPortRange_ = value;
      return this;
    }
    public Builder ClearAnalogOutPortRange() {
      PrepareBuilder();
      result.hasAnalogOutPortRange = false;
      result.analogOutPortRange_ = 0F;
      return this;
    }
    
    public bool HasIpAddr {
      get { return result.hasIpAddr; }
    }
    public pb::ByteString IpAddr {
      get { return result.IpAddr; }
      set { SetIpAddr(value); }
    }
    public Builder SetIpAddr(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIpAddr = true;
      result.ipAddr_ = value;
      return this;
    }
    public Builder ClearIpAddr() {
      PrepareBuilder();
      result.hasIpAddr = false;
      result.ipAddr_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasNetMask {
      get { return result.hasNetMask; }
    }
    public pb::ByteString NetMask {
      get { return result.NetMask; }
      set { SetNetMask(value); }
    }
    public Builder SetNetMask(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNetMask = true;
      result.netMask_ = value;
      return this;
    }
    public Builder ClearNetMask() {
      PrepareBuilder();
      result.hasNetMask = false;
      result.netMask_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasGateway {
      get { return result.hasGateway; }
    }
    public pb::ByteString Gateway {
      get { return result.Gateway; }
      set { SetGateway(value); }
    }
    public Builder SetGateway(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGateway = true;
      result.gateway_ = value;
      return this;
    }
    public Builder ClearGateway() {
      PrepareBuilder();
      result.hasGateway = false;
      result.gateway_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasPrimaryDns {
      get { return result.hasPrimaryDns; }
    }
    public pb::ByteString PrimaryDns {
      get { return result.PrimaryDns; }
      set { SetPrimaryDns(value); }
    }
    public Builder SetPrimaryDns(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPrimaryDns = true;
      result.primaryDns_ = value;
      return this;
    }
    public Builder ClearPrimaryDns() {
      PrepareBuilder();
      result.hasPrimaryDns = false;
      result.primaryDns_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasSecondaryDns {
      get { return result.hasSecondaryDns; }
    }
    public pb::ByteString SecondaryDns {
      get { return result.SecondaryDns; }
      set { SetSecondaryDns(value); }
    }
    public Builder SetSecondaryDns(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSecondaryDns = true;
      result.secondaryDns_ = value;
      return this;
    }
    public Builder ClearSecondaryDns() {
      PrepareBuilder();
      result.hasSecondaryDns = false;
      result.secondaryDns_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasMacAddr {
      get { return result.hasMacAddr; }
    }
    public pb::ByteString MacAddr {
      get { return result.MacAddr; }
      set { SetMacAddr(value); }
    }
    public Builder SetMacAddr(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMacAddr = true;
      result.macAddr_ = value;
      return this;
    }
    public Builder ClearMacAddr() {
      PrepareBuilder();
      result.hasMacAddr = false;
      result.macAddr_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasIpAddrV6 {
      get { return result.hasIpAddrV6; }
    }
    public pb::ByteString IpAddrV6 {
      get { return result.IpAddrV6; }
      set { SetIpAddrV6(value); }
    }
    public Builder SetIpAddrV6(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIpAddrV6 = true;
      result.ipAddrV6_ = value;
      return this;
    }
    public Builder ClearIpAddrV6() {
      PrepareBuilder();
      result.hasIpAddrV6 = false;
      result.ipAddrV6_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasSubPreLengthV6 {
      get { return result.hasSubPreLengthV6; }
    }
    public pb::ByteString SubPreLengthV6 {
      get { return result.SubPreLengthV6; }
      set { SetSubPreLengthV6(value); }
    }
    public Builder SetSubPreLengthV6(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSubPreLengthV6 = true;
      result.subPreLengthV6_ = value;
      return this;
    }
    public Builder ClearSubPreLengthV6() {
      PrepareBuilder();
      result.hasSubPreLengthV6 = false;
      result.subPreLengthV6_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasGatewayV6 {
      get { return result.hasGatewayV6; }
    }
    public pb::ByteString GatewayV6 {
      get { return result.GatewayV6; }
      set { SetGatewayV6(value); }
    }
    public Builder SetGatewayV6(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGatewayV6 = true;
      result.gatewayV6_ = value;
      return this;
    }
    public Builder ClearGatewayV6() {
      PrepareBuilder();
      result.hasGatewayV6 = false;
      result.gatewayV6_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasPrimaryDnsV6 {
      get { return result.hasPrimaryDnsV6; }
    }
    public pb::ByteString PrimaryDnsV6 {
      get { return result.PrimaryDnsV6; }
      set { SetPrimaryDnsV6(value); }
    }
    public Builder SetPrimaryDnsV6(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPrimaryDnsV6 = true;
      result.primaryDnsV6_ = value;
      return this;
    }
    public Builder ClearPrimaryDnsV6() {
      PrepareBuilder();
      result.hasPrimaryDnsV6 = false;
      result.primaryDnsV6_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasSecondaryDnsV6 {
      get { return result.hasSecondaryDnsV6; }
    }
    public pb::ByteString SecondaryDnsV6 {
      get { return result.SecondaryDnsV6; }
      set { SetSecondaryDnsV6(value); }
    }
    public Builder SetSecondaryDnsV6(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSecondaryDnsV6 = true;
      result.secondaryDnsV6_ = value;
      return this;
    }
    public Builder ClearSecondaryDnsV6() {
      PrepareBuilder();
      result.hasSecondaryDnsV6 = false;
      result.secondaryDnsV6_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasEui64 {
      get { return result.hasEui64; }
    }
    public pb::ByteString Eui64 {
      get { return result.Eui64; }
      set { SetEui64(value); }
    }
    public Builder SetEui64(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEui64 = true;
      result.eui64_ = value;
      return this;
    }
    public Builder ClearEui64() {
      PrepareBuilder();
      result.hasEui64 = false;
      result.eui64_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasHostName {
      get { return result.hasHostName; }
    }
    public string HostName {
      get { return result.HostName; }
      set { SetHostName(value); }
    }
    public Builder SetHostName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHostName = true;
      result.hostName_ = value;
      return this;
    }
    public Builder ClearHostName() {
      PrepareBuilder();
      result.hasHostName = false;
      result.hostName_ = "";
      return this;
    }
    
    public bool HasDevicePort {
      get { return result.hasDevicePort; }
    }
    [global::System.CLSCompliant(false)]
    public uint DevicePort {
      get { return result.DevicePort; }
      set { SetDevicePort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDevicePort(uint value) {
      PrepareBuilder();
      result.hasDevicePort = true;
      result.devicePort_ = value;
      return this;
    }
    public Builder ClearDevicePort() {
      PrepareBuilder();
      result.hasDevicePort = false;
      result.devicePort_ = 0;
      return this;
    }
    
    public bool HasFriendlyDeviceName {
      get { return result.hasFriendlyDeviceName; }
    }
    public string FriendlyDeviceName {
      get { return result.FriendlyDeviceName; }
      set { SetFriendlyDeviceName(value); }
    }
    public Builder SetFriendlyDeviceName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFriendlyDeviceName = true;
      result.friendlyDeviceName_ = value;
      return this;
    }
    public Builder ClearFriendlyDeviceName() {
      PrepareBuilder();
      result.hasFriendlyDeviceName = false;
      result.friendlyDeviceName_ = "";
      return this;
    }
    
    public bool HasSsid {
      get { return result.hasSsid; }
    }
    public string Ssid {
      get { return result.Ssid; }
      set { SetSsid(value); }
    }
    public Builder SetSsid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSsid = true;
      result.ssid_ = value;
      return this;
    }
    public Builder ClearSsid() {
      PrepareBuilder();
      result.hasSsid = false;
      result.ssid_ = "";
      return this;
    }
    
    public bool HasSsidStrength {
      get { return result.hasSsidStrength; }
    }
    [global::System.CLSCompliant(false)]
    public uint SsidStrength {
      get { return result.SsidStrength; }
      set { SetSsidStrength(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSsidStrength(uint value) {
      PrepareBuilder();
      result.hasSsidStrength = true;
      result.ssidStrength_ = value;
      return this;
    }
    public Builder ClearSsidStrength() {
      PrepareBuilder();
      result.hasSsidStrength = false;
      result.ssidStrength_ = 0;
      return this;
    }
    
    public bool HasWifiSecurityMode {
      get { return result.hasWifiSecurityMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint WifiSecurityMode {
      get { return result.WifiSecurityMode; }
      set { SetWifiSecurityMode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWifiSecurityMode(uint value) {
      PrepareBuilder();
      result.hasWifiSecurityMode = true;
      result.wifiSecurityMode_ = value;
      return this;
    }
    public Builder ClearWifiSecurityMode() {
      PrepareBuilder();
      result.hasWifiSecurityMode = false;
      result.wifiSecurityMode_ = 0;
      return this;
    }
    
    public bool HasWifiInfMode {
      get { return result.hasWifiInfMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint WifiInfMode {
      get { return result.WifiInfMode; }
      set { SetWifiInfMode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWifiInfMode(uint value) {
      PrepareBuilder();
      result.hasWifiInfMode = true;
      result.wifiInfMode_ = value;
      return this;
    }
    public Builder ClearWifiInfMode() {
      PrepareBuilder();
      result.hasWifiInfMode = false;
      result.wifiInfMode_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> AvSsidList {
      get { return PrepareBuilder().avSsid_; }
    }
    public int AvSsidCount {
      get { return result.AvSsidCount; }
    }
    public string GetAvSsid(int index) {
      return result.GetAvSsid(index);
    }
    public Builder SetAvSsid(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.avSsid_[index] = value;
      return this;
    }
    public Builder AddAvSsid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.avSsid_.Add(value);
      return this;
    }
    public Builder AddRangeAvSsid(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.avSsid_.Add(values);
      return this;
    }
    public Builder ClearAvSsid() {
      PrepareBuilder();
      result.avSsid_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AvSsidStrengthList {
      get { return PrepareBuilder().avSsidStrength_; }
    }
    public int AvSsidStrengthCount {
      get { return result.AvSsidStrengthCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAvSsidStrength(int index) {
      return result.GetAvSsidStrength(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAvSsidStrength(int index, uint value) {
      PrepareBuilder();
      result.avSsidStrength_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAvSsidStrength(uint value) {
      PrepareBuilder();
      result.avSsidStrength_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAvSsidStrength(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.avSsidStrength_.Add(values);
      return this;
    }
    public Builder ClearAvSsidStrength() {
      PrepareBuilder();
      result.avSsidStrength_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AvWifiSecurityModeList {
      get { return PrepareBuilder().avWifiSecurityMode_; }
    }
    public int AvWifiSecurityModeCount {
      get { return result.AvWifiSecurityModeCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAvWifiSecurityMode(int index) {
      return result.GetAvWifiSecurityMode(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAvWifiSecurityMode(int index, uint value) {
      PrepareBuilder();
      result.avWifiSecurityMode_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAvWifiSecurityMode(uint value) {
      PrepareBuilder();
      result.avWifiSecurityMode_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAvWifiSecurityMode(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.avWifiSecurityMode_.Add(values);
      return this;
    }
    public Builder ClearAvWifiSecurityMode() {
      PrepareBuilder();
      result.avWifiSecurityMode_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AvWifiInfModeList {
      get { return PrepareBuilder().avWifiInfMode_; }
    }
    public int AvWifiInfModeCount {
      get { return result.AvWifiInfModeCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAvWifiInfMode(int index) {
      return result.GetAvWifiInfMode(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAvWifiInfMode(int index, uint value) {
      PrepareBuilder();
      result.avWifiInfMode_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAvWifiInfMode(uint value) {
      PrepareBuilder();
      result.avWifiInfMode_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAvWifiInfMode(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.avWifiInfMode_.Add(values);
      return this;
    }
    public Builder ClearAvWifiInfMode() {
      PrepareBuilder();
      result.avWifiInfMode_.Clear();
      return this;
    }
    
    public bool HasDevicePn {
      get { return result.hasDevicePn; }
    }
    public string DevicePn {
      get { return result.DevicePn; }
      set { SetDevicePn(value); }
    }
    public Builder SetDevicePn(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDevicePn = true;
      result.devicePn_ = value;
      return this;
    }
    public Builder ClearDevicePn() {
      PrepareBuilder();
      result.hasDevicePn = false;
      result.devicePn_ = "";
      return this;
    }
    
    public bool HasDeviceHwRev {
      get { return result.hasDeviceHwRev; }
    }
    public string DeviceHwRev {
      get { return result.DeviceHwRev; }
      set { SetDeviceHwRev(value); }
    }
    public Builder SetDeviceHwRev(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceHwRev = true;
      result.deviceHwRev_ = value;
      return this;
    }
    public Builder ClearDeviceHwRev() {
      PrepareBuilder();
      result.hasDeviceHwRev = false;
      result.deviceHwRev_ = "";
      return this;
    }
    
    public bool HasDeviceFwRev {
      get { return result.hasDeviceFwRev; }
    }
    public string DeviceFwRev {
      get { return result.DeviceFwRev; }
      set { SetDeviceFwRev(value); }
    }
    public Builder SetDeviceFwRev(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceFwRev = true;
      result.deviceFwRev_ = value;
      return this;
    }
    public Builder ClearDeviceFwRev() {
      PrepareBuilder();
      result.hasDeviceFwRev = false;
      result.deviceFwRev_ = "";
      return this;
    }
    
    public bool HasDeviceSn {
      get { return result.hasDeviceSn; }
    }
    [global::System.CLSCompliant(false)]
    public ulong DeviceSn {
      get { return result.DeviceSn; }
      set { SetDeviceSn(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDeviceSn(ulong value) {
      PrepareBuilder();
      result.hasDeviceSn = true;
      result.deviceSn_ = value;
      return this;
    }
    public Builder ClearDeviceSn() {
      PrepareBuilder();
      result.hasDeviceSn = false;
      result.deviceSn_ = 0UL;
      return this;
    }
  }
  static DaqifiOutMessage() {
    object.ReferenceEquals(global::Proto.DaqifiOutMessage.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
