// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class WiFiDAQOutMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_WiFiDAQOutMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::WiFiDAQOutMessage, global::WiFiDAQOutMessage.Builder> internal__static_WiFiDAQOutMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static WiFiDAQOutMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChdXaUZpREFRT3V0TWVzc2FnZS5wcm90byK2AwoRV2lGaURBUU91dE1lc3Nh" + 
          "Z2USDwoHbXNnX3NlcRgBIAEoDRIcChBhbmFsb2dfaW5fZGF0YV9pGAIgAygR" + 
          "QgIQARIYChBhbmFsb2dfaW5fZGF0YV9iGAMgASgMEhQKDGRpZ2l0YWxfZGF0" + 
          "YRgEIAEoDBIVCg1kZXZpY2Vfc3RhdHVzGAUgASgNEhEKCWJhdF9sZXZlbBgG" + 
          "IAEoDRISCgpwd3Jfc3RhdHVzGAcgASgNEhIKCmJvYXJkX3RlbXAYCCABKA0S" + 
          "GwoPYW5hbG9nX291dF9kYXRhGAkgAygRQgIQARIPCgdpcF9hZGRyGBAgAygM" + 
          "EhEKCWhvc3RfbmFtZRgRIAEoCRIQCghtYWNfYWRkchgSIAMoDBIMCgRzc2lk" + 
          "GBMgASgJEhgKEGRpZ2l0YWxfcG9ydF9kaXIYFCABKAwSFwoPYW5hbG9nX3Bv" + 
          "cnRfcnNlGBUgASgMEhsKE2FuYWxvZ19wb3J0X2VuYWJsZWQYFiABKAwSGQoR" + 
          "YW5hbG9nX3BvcnRfcmFuZ2UYFyABKAwSEQoJYWRjX2J5dGVzGBggASgNEhEK" + 
          "CWRhY19ieXRlcxgZIAEoDQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_WiFiDAQOutMessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_WiFiDAQOutMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::WiFiDAQOutMessage, global::WiFiDAQOutMessage.Builder>(internal__static_WiFiDAQOutMessage__Descriptor,
                new string[] { "MsgSeq", "AnalogInDataI", "AnalogInDataB", "DigitalData", "DeviceStatus", "BatLevel", "PwrStatus", "BoardTemp", "AnalogOutData", "IpAddr", "HostName", "MacAddr", "Ssid", "DigitalPortDir", "AnalogPortRse", "AnalogPortEnabled", "AnalogPortRange", "AdcBytes", "DacBytes", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class WiFiDAQOutMessage : pb::GeneratedMessage<WiFiDAQOutMessage, WiFiDAQOutMessage.Builder> {
  private WiFiDAQOutMessage() { }
  private static readonly WiFiDAQOutMessage defaultInstance = new WiFiDAQOutMessage().MakeReadOnly();
  private static readonly string[] _wiFiDAQOutMessageFieldNames = new string[] { "adc_bytes", "analog_in_data_b", "analog_in_data_i", "analog_out_data", "analog_port_enabled", "analog_port_range", "analog_port_rse", "bat_level", "board_temp", "dac_bytes", "device_status", "digital_data", "digital_port_dir", "host_name", "ip_addr", "mac_addr", "msg_seq", "pwr_status", "ssid" };
  private static readonly uint[] _wiFiDAQOutMessageFieldTags = new uint[] { 192, 26, 18, 74, 178, 186, 170, 48, 64, 200, 40, 34, 162, 138, 130, 146, 8, 56, 154 };
  public static WiFiDAQOutMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override WiFiDAQOutMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override WiFiDAQOutMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.WiFiDAQOutMessage.internal__static_WiFiDAQOutMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<WiFiDAQOutMessage, WiFiDAQOutMessage.Builder> InternalFieldAccessors {
    get { return global::Proto.WiFiDAQOutMessage.internal__static_WiFiDAQOutMessage__FieldAccessorTable; }
  }
  
  public const int MsgSeqFieldNumber = 1;
  private bool hasMsgSeq;
  private uint msgSeq_;
  public bool HasMsgSeq {
    get { return hasMsgSeq; }
  }
  [global::System.CLSCompliant(false)]
  public uint MsgSeq {
    get { return msgSeq_; }
  }
  
  public const int AnalogInDataIFieldNumber = 2;
  private int analogInDataIMemoizedSerializedSize;
  private pbc::PopsicleList<int> analogInDataI_ = new pbc::PopsicleList<int>();
  public scg::IList<int> AnalogInDataIList {
    get { return pbc::Lists.AsReadOnly(analogInDataI_); }
  }
  public int AnalogInDataICount {
    get { return analogInDataI_.Count; }
  }
  public int GetAnalogInDataI(int index) {
    return analogInDataI_[index];
  }
  
  public const int AnalogInDataBFieldNumber = 3;
  private bool hasAnalogInDataB;
  private pb::ByteString analogInDataB_ = pb::ByteString.Empty;
  public bool HasAnalogInDataB {
    get { return hasAnalogInDataB; }
  }
  public pb::ByteString AnalogInDataB {
    get { return analogInDataB_; }
  }
  
  public const int DigitalDataFieldNumber = 4;
  private bool hasDigitalData;
  private pb::ByteString digitalData_ = pb::ByteString.Empty;
  public bool HasDigitalData {
    get { return hasDigitalData; }
  }
  public pb::ByteString DigitalData {
    get { return digitalData_; }
  }
  
  public const int DeviceStatusFieldNumber = 5;
  private bool hasDeviceStatus;
  private uint deviceStatus_;
  public bool HasDeviceStatus {
    get { return hasDeviceStatus; }
  }
  [global::System.CLSCompliant(false)]
  public uint DeviceStatus {
    get { return deviceStatus_; }
  }
  
  public const int BatLevelFieldNumber = 6;
  private bool hasBatLevel;
  private uint batLevel_;
  public bool HasBatLevel {
    get { return hasBatLevel; }
  }
  [global::System.CLSCompliant(false)]
  public uint BatLevel {
    get { return batLevel_; }
  }
  
  public const int PwrStatusFieldNumber = 7;
  private bool hasPwrStatus;
  private uint pwrStatus_;
  public bool HasPwrStatus {
    get { return hasPwrStatus; }
  }
  [global::System.CLSCompliant(false)]
  public uint PwrStatus {
    get { return pwrStatus_; }
  }
  
  public const int BoardTempFieldNumber = 8;
  private bool hasBoardTemp;
  private uint boardTemp_;
  public bool HasBoardTemp {
    get { return hasBoardTemp; }
  }
  [global::System.CLSCompliant(false)]
  public uint BoardTemp {
    get { return boardTemp_; }
  }
  
  public const int AnalogOutDataFieldNumber = 9;
  private int analogOutDataMemoizedSerializedSize;
  private pbc::PopsicleList<int> analogOutData_ = new pbc::PopsicleList<int>();
  public scg::IList<int> AnalogOutDataList {
    get { return pbc::Lists.AsReadOnly(analogOutData_); }
  }
  public int AnalogOutDataCount {
    get { return analogOutData_.Count; }
  }
  public int GetAnalogOutData(int index) {
    return analogOutData_[index];
  }
  
  public const int IpAddrFieldNumber = 16;
  private pbc::PopsicleList<pb::ByteString> ipAddr_ = new pbc::PopsicleList<pb::ByteString>();
  public scg::IList<pb::ByteString> IpAddrList {
    get { return pbc::Lists.AsReadOnly(ipAddr_); }
  }
  public int IpAddrCount {
    get { return ipAddr_.Count; }
  }
  public pb::ByteString GetIpAddr(int index) {
    return ipAddr_[index];
  }
  
  public const int HostNameFieldNumber = 17;
  private bool hasHostName;
  private string hostName_ = "";
  public bool HasHostName {
    get { return hasHostName; }
  }
  public string HostName {
    get { return hostName_; }
  }
  
  public const int MacAddrFieldNumber = 18;
  private pbc::PopsicleList<pb::ByteString> macAddr_ = new pbc::PopsicleList<pb::ByteString>();
  public scg::IList<pb::ByteString> MacAddrList {
    get { return pbc::Lists.AsReadOnly(macAddr_); }
  }
  public int MacAddrCount {
    get { return macAddr_.Count; }
  }
  public pb::ByteString GetMacAddr(int index) {
    return macAddr_[index];
  }
  
  public const int SsidFieldNumber = 19;
  private bool hasSsid;
  private string ssid_ = "";
  public bool HasSsid {
    get { return hasSsid; }
  }
  public string Ssid {
    get { return ssid_; }
  }
  
  public const int DigitalPortDirFieldNumber = 20;
  private bool hasDigitalPortDir;
  private pb::ByteString digitalPortDir_ = pb::ByteString.Empty;
  public bool HasDigitalPortDir {
    get { return hasDigitalPortDir; }
  }
  public pb::ByteString DigitalPortDir {
    get { return digitalPortDir_; }
  }
  
  public const int AnalogPortRseFieldNumber = 21;
  private bool hasAnalogPortRse;
  private pb::ByteString analogPortRse_ = pb::ByteString.Empty;
  public bool HasAnalogPortRse {
    get { return hasAnalogPortRse; }
  }
  public pb::ByteString AnalogPortRse {
    get { return analogPortRse_; }
  }
  
  public const int AnalogPortEnabledFieldNumber = 22;
  private bool hasAnalogPortEnabled;
  private pb::ByteString analogPortEnabled_ = pb::ByteString.Empty;
  public bool HasAnalogPortEnabled {
    get { return hasAnalogPortEnabled; }
  }
  public pb::ByteString AnalogPortEnabled {
    get { return analogPortEnabled_; }
  }
  
  public const int AnalogPortRangeFieldNumber = 23;
  private bool hasAnalogPortRange;
  private pb::ByteString analogPortRange_ = pb::ByteString.Empty;
  public bool HasAnalogPortRange {
    get { return hasAnalogPortRange; }
  }
  public pb::ByteString AnalogPortRange {
    get { return analogPortRange_; }
  }
  
  public const int AdcBytesFieldNumber = 24;
  private bool hasAdcBytes;
  private uint adcBytes_;
  public bool HasAdcBytes {
    get { return hasAdcBytes; }
  }
  [global::System.CLSCompliant(false)]
  public uint AdcBytes {
    get { return adcBytes_; }
  }
  
  public const int DacBytesFieldNumber = 25;
  private bool hasDacBytes;
  private uint dacBytes_;
  public bool HasDacBytes {
    get { return hasDacBytes; }
  }
  [global::System.CLSCompliant(false)]
  public uint DacBytes {
    get { return dacBytes_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _wiFiDAQOutMessageFieldNames;
    if (hasMsgSeq) {
      output.WriteUInt32(1, field_names[16], MsgSeq);
    }
    if (analogInDataI_.Count > 0) {
      output.WritePackedSInt32Array(2, field_names[2], analogInDataIMemoizedSerializedSize, analogInDataI_);
    }
    if (hasAnalogInDataB) {
      output.WriteBytes(3, field_names[1], AnalogInDataB);
    }
    if (hasDigitalData) {
      output.WriteBytes(4, field_names[11], DigitalData);
    }
    if (hasDeviceStatus) {
      output.WriteUInt32(5, field_names[10], DeviceStatus);
    }
    if (hasBatLevel) {
      output.WriteUInt32(6, field_names[7], BatLevel);
    }
    if (hasPwrStatus) {
      output.WriteUInt32(7, field_names[17], PwrStatus);
    }
    if (hasBoardTemp) {
      output.WriteUInt32(8, field_names[8], BoardTemp);
    }
    if (analogOutData_.Count > 0) {
      output.WritePackedSInt32Array(9, field_names[3], analogOutDataMemoizedSerializedSize, analogOutData_);
    }
    if (ipAddr_.Count > 0) {
      output.WriteBytesArray(16, field_names[14], ipAddr_);
    }
    if (hasHostName) {
      output.WriteString(17, field_names[13], HostName);
    }
    if (macAddr_.Count > 0) {
      output.WriteBytesArray(18, field_names[15], macAddr_);
    }
    if (hasSsid) {
      output.WriteString(19, field_names[18], Ssid);
    }
    if (hasDigitalPortDir) {
      output.WriteBytes(20, field_names[12], DigitalPortDir);
    }
    if (hasAnalogPortRse) {
      output.WriteBytes(21, field_names[6], AnalogPortRse);
    }
    if (hasAnalogPortEnabled) {
      output.WriteBytes(22, field_names[4], AnalogPortEnabled);
    }
    if (hasAnalogPortRange) {
      output.WriteBytes(23, field_names[5], AnalogPortRange);
    }
    if (hasAdcBytes) {
      output.WriteUInt32(24, field_names[0], AdcBytes);
    }
    if (hasDacBytes) {
      output.WriteUInt32(25, field_names[9], DacBytes);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMsgSeq) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MsgSeq);
      }
      {
        int dataSize = 0;
        foreach (int element in AnalogInDataIList) {
          dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
        }
        size += dataSize;
        if (analogInDataI_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        analogInDataIMemoizedSerializedSize = dataSize;
      }
      if (hasAnalogInDataB) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, AnalogInDataB);
      }
      if (hasDigitalData) {
        size += pb::CodedOutputStream.ComputeBytesSize(4, DigitalData);
      }
      if (hasDeviceStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, DeviceStatus);
      }
      if (hasBatLevel) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, BatLevel);
      }
      if (hasPwrStatus) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, PwrStatus);
      }
      if (hasBoardTemp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, BoardTemp);
      }
      {
        int dataSize = 0;
        foreach (int element in AnalogOutDataList) {
          dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
        }
        size += dataSize;
        if (analogOutData_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        analogOutDataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (pb::ByteString element in IpAddrList) {
          dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * ipAddr_.Count;
      }
      if (hasHostName) {
        size += pb::CodedOutputStream.ComputeStringSize(17, HostName);
      }
      {
        int dataSize = 0;
        foreach (pb::ByteString element in MacAddrList) {
          dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 2 * macAddr_.Count;
      }
      if (hasSsid) {
        size += pb::CodedOutputStream.ComputeStringSize(19, Ssid);
      }
      if (hasDigitalPortDir) {
        size += pb::CodedOutputStream.ComputeBytesSize(20, DigitalPortDir);
      }
      if (hasAnalogPortRse) {
        size += pb::CodedOutputStream.ComputeBytesSize(21, AnalogPortRse);
      }
      if (hasAnalogPortEnabled) {
        size += pb::CodedOutputStream.ComputeBytesSize(22, AnalogPortEnabled);
      }
      if (hasAnalogPortRange) {
        size += pb::CodedOutputStream.ComputeBytesSize(23, AnalogPortRange);
      }
      if (hasAdcBytes) {
        size += pb::CodedOutputStream.ComputeUInt32Size(24, AdcBytes);
      }
      if (hasDacBytes) {
        size += pb::CodedOutputStream.ComputeUInt32Size(25, DacBytes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static WiFiDAQOutMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static WiFiDAQOutMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private WiFiDAQOutMessage MakeReadOnly() {
    analogInDataI_.MakeReadOnly();
    analogOutData_.MakeReadOnly();
    ipAddr_.MakeReadOnly();
    macAddr_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(WiFiDAQOutMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<WiFiDAQOutMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(WiFiDAQOutMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private WiFiDAQOutMessage result;
    
    private WiFiDAQOutMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        WiFiDAQOutMessage original = result;
        result = new WiFiDAQOutMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override WiFiDAQOutMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::WiFiDAQOutMessage.Descriptor; }
    }
    
    public override WiFiDAQOutMessage DefaultInstanceForType {
      get { return global::WiFiDAQOutMessage.DefaultInstance; }
    }
    
    public override WiFiDAQOutMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is WiFiDAQOutMessage) {
        return MergeFrom((WiFiDAQOutMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(WiFiDAQOutMessage other) {
      if (other == global::WiFiDAQOutMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsgSeq) {
        MsgSeq = other.MsgSeq;
      }
      if (other.analogInDataI_.Count != 0) {
        result.analogInDataI_.Add(other.analogInDataI_);
      }
      if (other.HasAnalogInDataB) {
        AnalogInDataB = other.AnalogInDataB;
      }
      if (other.HasDigitalData) {
        DigitalData = other.DigitalData;
      }
      if (other.HasDeviceStatus) {
        DeviceStatus = other.DeviceStatus;
      }
      if (other.HasBatLevel) {
        BatLevel = other.BatLevel;
      }
      if (other.HasPwrStatus) {
        PwrStatus = other.PwrStatus;
      }
      if (other.HasBoardTemp) {
        BoardTemp = other.BoardTemp;
      }
      if (other.analogOutData_.Count != 0) {
        result.analogOutData_.Add(other.analogOutData_);
      }
      if (other.ipAddr_.Count != 0) {
        result.ipAddr_.Add(other.ipAddr_);
      }
      if (other.HasHostName) {
        HostName = other.HostName;
      }
      if (other.macAddr_.Count != 0) {
        result.macAddr_.Add(other.macAddr_);
      }
      if (other.HasSsid) {
        Ssid = other.Ssid;
      }
      if (other.HasDigitalPortDir) {
        DigitalPortDir = other.DigitalPortDir;
      }
      if (other.HasAnalogPortRse) {
        AnalogPortRse = other.AnalogPortRse;
      }
      if (other.HasAnalogPortEnabled) {
        AnalogPortEnabled = other.AnalogPortEnabled;
      }
      if (other.HasAnalogPortRange) {
        AnalogPortRange = other.AnalogPortRange;
      }
      if (other.HasAdcBytes) {
        AdcBytes = other.AdcBytes;
      }
      if (other.HasDacBytes) {
        DacBytes = other.DacBytes;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_wiFiDAQOutMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _wiFiDAQOutMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMsgSeq = input.ReadUInt32(ref result.msgSeq_);
            break;
          }
          case 18:
          case 16: {
            input.ReadSInt32Array(tag, field_name, result.analogInDataI_);
            break;
          }
          case 26: {
            result.hasAnalogInDataB = input.ReadBytes(ref result.analogInDataB_);
            break;
          }
          case 34: {
            result.hasDigitalData = input.ReadBytes(ref result.digitalData_);
            break;
          }
          case 40: {
            result.hasDeviceStatus = input.ReadUInt32(ref result.deviceStatus_);
            break;
          }
          case 48: {
            result.hasBatLevel = input.ReadUInt32(ref result.batLevel_);
            break;
          }
          case 56: {
            result.hasPwrStatus = input.ReadUInt32(ref result.pwrStatus_);
            break;
          }
          case 64: {
            result.hasBoardTemp = input.ReadUInt32(ref result.boardTemp_);
            break;
          }
          case 74:
          case 72: {
            input.ReadSInt32Array(tag, field_name, result.analogOutData_);
            break;
          }
          case 130: {
            input.ReadBytesArray(tag, field_name, result.ipAddr_);
            break;
          }
          case 138: {
            result.hasHostName = input.ReadString(ref result.hostName_);
            break;
          }
          case 146: {
            input.ReadBytesArray(tag, field_name, result.macAddr_);
            break;
          }
          case 154: {
            result.hasSsid = input.ReadString(ref result.ssid_);
            break;
          }
          case 162: {
            result.hasDigitalPortDir = input.ReadBytes(ref result.digitalPortDir_);
            break;
          }
          case 170: {
            result.hasAnalogPortRse = input.ReadBytes(ref result.analogPortRse_);
            break;
          }
          case 178: {
            result.hasAnalogPortEnabled = input.ReadBytes(ref result.analogPortEnabled_);
            break;
          }
          case 186: {
            result.hasAnalogPortRange = input.ReadBytes(ref result.analogPortRange_);
            break;
          }
          case 192: {
            result.hasAdcBytes = input.ReadUInt32(ref result.adcBytes_);
            break;
          }
          case 200: {
            result.hasDacBytes = input.ReadUInt32(ref result.dacBytes_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsgSeq {
      get { return result.hasMsgSeq; }
    }
    [global::System.CLSCompliant(false)]
    public uint MsgSeq {
      get { return result.MsgSeq; }
      set { SetMsgSeq(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMsgSeq(uint value) {
      PrepareBuilder();
      result.hasMsgSeq = true;
      result.msgSeq_ = value;
      return this;
    }
    public Builder ClearMsgSeq() {
      PrepareBuilder();
      result.hasMsgSeq = false;
      result.msgSeq_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> AnalogInDataIList {
      get { return PrepareBuilder().analogInDataI_; }
    }
    public int AnalogInDataICount {
      get { return result.AnalogInDataICount; }
    }
    public int GetAnalogInDataI(int index) {
      return result.GetAnalogInDataI(index);
    }
    public Builder SetAnalogInDataI(int index, int value) {
      PrepareBuilder();
      result.analogInDataI_[index] = value;
      return this;
    }
    public Builder AddAnalogInDataI(int value) {
      PrepareBuilder();
      result.analogInDataI_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogInDataI(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.analogInDataI_.Add(values);
      return this;
    }
    public Builder ClearAnalogInDataI() {
      PrepareBuilder();
      result.analogInDataI_.Clear();
      return this;
    }
    
    public bool HasAnalogInDataB {
      get { return result.hasAnalogInDataB; }
    }
    public pb::ByteString AnalogInDataB {
      get { return result.AnalogInDataB; }
      set { SetAnalogInDataB(value); }
    }
    public Builder SetAnalogInDataB(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogInDataB = true;
      result.analogInDataB_ = value;
      return this;
    }
    public Builder ClearAnalogInDataB() {
      PrepareBuilder();
      result.hasAnalogInDataB = false;
      result.analogInDataB_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasDigitalData {
      get { return result.hasDigitalData; }
    }
    public pb::ByteString DigitalData {
      get { return result.DigitalData; }
      set { SetDigitalData(value); }
    }
    public Builder SetDigitalData(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDigitalData = true;
      result.digitalData_ = value;
      return this;
    }
    public Builder ClearDigitalData() {
      PrepareBuilder();
      result.hasDigitalData = false;
      result.digitalData_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasDeviceStatus {
      get { return result.hasDeviceStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint DeviceStatus {
      get { return result.DeviceStatus; }
      set { SetDeviceStatus(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDeviceStatus(uint value) {
      PrepareBuilder();
      result.hasDeviceStatus = true;
      result.deviceStatus_ = value;
      return this;
    }
    public Builder ClearDeviceStatus() {
      PrepareBuilder();
      result.hasDeviceStatus = false;
      result.deviceStatus_ = 0;
      return this;
    }
    
    public bool HasBatLevel {
      get { return result.hasBatLevel; }
    }
    [global::System.CLSCompliant(false)]
    public uint BatLevel {
      get { return result.BatLevel; }
      set { SetBatLevel(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBatLevel(uint value) {
      PrepareBuilder();
      result.hasBatLevel = true;
      result.batLevel_ = value;
      return this;
    }
    public Builder ClearBatLevel() {
      PrepareBuilder();
      result.hasBatLevel = false;
      result.batLevel_ = 0;
      return this;
    }
    
    public bool HasPwrStatus {
      get { return result.hasPwrStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint PwrStatus {
      get { return result.PwrStatus; }
      set { SetPwrStatus(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPwrStatus(uint value) {
      PrepareBuilder();
      result.hasPwrStatus = true;
      result.pwrStatus_ = value;
      return this;
    }
    public Builder ClearPwrStatus() {
      PrepareBuilder();
      result.hasPwrStatus = false;
      result.pwrStatus_ = 0;
      return this;
    }
    
    public bool HasBoardTemp {
      get { return result.hasBoardTemp; }
    }
    [global::System.CLSCompliant(false)]
    public uint BoardTemp {
      get { return result.BoardTemp; }
      set { SetBoardTemp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBoardTemp(uint value) {
      PrepareBuilder();
      result.hasBoardTemp = true;
      result.boardTemp_ = value;
      return this;
    }
    public Builder ClearBoardTemp() {
      PrepareBuilder();
      result.hasBoardTemp = false;
      result.boardTemp_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> AnalogOutDataList {
      get { return PrepareBuilder().analogOutData_; }
    }
    public int AnalogOutDataCount {
      get { return result.AnalogOutDataCount; }
    }
    public int GetAnalogOutData(int index) {
      return result.GetAnalogOutData(index);
    }
    public Builder SetAnalogOutData(int index, int value) {
      PrepareBuilder();
      result.analogOutData_[index] = value;
      return this;
    }
    public Builder AddAnalogOutData(int value) {
      PrepareBuilder();
      result.analogOutData_.Add(value);
      return this;
    }
    public Builder AddRangeAnalogOutData(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.analogOutData_.Add(values);
      return this;
    }
    public Builder ClearAnalogOutData() {
      PrepareBuilder();
      result.analogOutData_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<pb::ByteString> IpAddrList {
      get { return PrepareBuilder().ipAddr_; }
    }
    public int IpAddrCount {
      get { return result.IpAddrCount; }
    }
    public pb::ByteString GetIpAddr(int index) {
      return result.GetIpAddr(index);
    }
    public Builder SetIpAddr(int index, pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.ipAddr_[index] = value;
      return this;
    }
    public Builder AddIpAddr(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.ipAddr_.Add(value);
      return this;
    }
    public Builder AddRangeIpAddr(scg::IEnumerable<pb::ByteString> values) {
      PrepareBuilder();
      result.ipAddr_.Add(values);
      return this;
    }
    public Builder ClearIpAddr() {
      PrepareBuilder();
      result.ipAddr_.Clear();
      return this;
    }
    
    public bool HasHostName {
      get { return result.hasHostName; }
    }
    public string HostName {
      get { return result.HostName; }
      set { SetHostName(value); }
    }
    public Builder SetHostName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHostName = true;
      result.hostName_ = value;
      return this;
    }
    public Builder ClearHostName() {
      PrepareBuilder();
      result.hasHostName = false;
      result.hostName_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<pb::ByteString> MacAddrList {
      get { return PrepareBuilder().macAddr_; }
    }
    public int MacAddrCount {
      get { return result.MacAddrCount; }
    }
    public pb::ByteString GetMacAddr(int index) {
      return result.GetMacAddr(index);
    }
    public Builder SetMacAddr(int index, pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.macAddr_[index] = value;
      return this;
    }
    public Builder AddMacAddr(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.macAddr_.Add(value);
      return this;
    }
    public Builder AddRangeMacAddr(scg::IEnumerable<pb::ByteString> values) {
      PrepareBuilder();
      result.macAddr_.Add(values);
      return this;
    }
    public Builder ClearMacAddr() {
      PrepareBuilder();
      result.macAddr_.Clear();
      return this;
    }
    
    public bool HasSsid {
      get { return result.hasSsid; }
    }
    public string Ssid {
      get { return result.Ssid; }
      set { SetSsid(value); }
    }
    public Builder SetSsid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSsid = true;
      result.ssid_ = value;
      return this;
    }
    public Builder ClearSsid() {
      PrepareBuilder();
      result.hasSsid = false;
      result.ssid_ = "";
      return this;
    }
    
    public bool HasDigitalPortDir {
      get { return result.hasDigitalPortDir; }
    }
    public pb::ByteString DigitalPortDir {
      get { return result.DigitalPortDir; }
      set { SetDigitalPortDir(value); }
    }
    public Builder SetDigitalPortDir(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDigitalPortDir = true;
      result.digitalPortDir_ = value;
      return this;
    }
    public Builder ClearDigitalPortDir() {
      PrepareBuilder();
      result.hasDigitalPortDir = false;
      result.digitalPortDir_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogPortRse {
      get { return result.hasAnalogPortRse; }
    }
    public pb::ByteString AnalogPortRse {
      get { return result.AnalogPortRse; }
      set { SetAnalogPortRse(value); }
    }
    public Builder SetAnalogPortRse(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogPortRse = true;
      result.analogPortRse_ = value;
      return this;
    }
    public Builder ClearAnalogPortRse() {
      PrepareBuilder();
      result.hasAnalogPortRse = false;
      result.analogPortRse_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogPortEnabled {
      get { return result.hasAnalogPortEnabled; }
    }
    public pb::ByteString AnalogPortEnabled {
      get { return result.AnalogPortEnabled; }
      set { SetAnalogPortEnabled(value); }
    }
    public Builder SetAnalogPortEnabled(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogPortEnabled = true;
      result.analogPortEnabled_ = value;
      return this;
    }
    public Builder ClearAnalogPortEnabled() {
      PrepareBuilder();
      result.hasAnalogPortEnabled = false;
      result.analogPortEnabled_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAnalogPortRange {
      get { return result.hasAnalogPortRange; }
    }
    public pb::ByteString AnalogPortRange {
      get { return result.AnalogPortRange; }
      set { SetAnalogPortRange(value); }
    }
    public Builder SetAnalogPortRange(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAnalogPortRange = true;
      result.analogPortRange_ = value;
      return this;
    }
    public Builder ClearAnalogPortRange() {
      PrepareBuilder();
      result.hasAnalogPortRange = false;
      result.analogPortRange_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAdcBytes {
      get { return result.hasAdcBytes; }
    }
    [global::System.CLSCompliant(false)]
    public uint AdcBytes {
      get { return result.AdcBytes; }
      set { SetAdcBytes(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAdcBytes(uint value) {
      PrepareBuilder();
      result.hasAdcBytes = true;
      result.adcBytes_ = value;
      return this;
    }
    public Builder ClearAdcBytes() {
      PrepareBuilder();
      result.hasAdcBytes = false;
      result.adcBytes_ = 0;
      return this;
    }
    
    public bool HasDacBytes {
      get { return result.hasDacBytes; }
    }
    [global::System.CLSCompliant(false)]
    public uint DacBytes {
      get { return result.DacBytes; }
      set { SetDacBytes(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDacBytes(uint value) {
      PrepareBuilder();
      result.hasDacBytes = true;
      result.dacBytes_ = value;
      return this;
    }
    public Builder ClearDacBytes() {
      PrepareBuilder();
      result.hasDacBytes = false;
      result.dacBytes_ = 0;
      return this;
    }
  }
  static WiFiDAQOutMessage() {
    object.ReferenceEquals(global::Proto.WiFiDAQOutMessage.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
