// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/DaqifiOutMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Protos/DaqifiOutMessage.proto</summary>
public static partial class DaqifiOutMessageReflection
{

    #region Descriptor
    /// <summary>File descriptor for Protos/DaqifiOutMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DaqifiOutMessageReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "Ch1Qcm90b3MvRGFxaWZpT3V0TWVzc2FnZS5wcm90byKBDQoQRGFxaWZpT3V0",
              "TWVzc2FnZRIWCg5tc2dfdGltZV9zdGFtcBgBIAEoDRIWCg5hbmFsb2dfaW5f",
              "ZGF0YRgCIAMoERIcChRhbmFsb2dfaW5fZGF0YV9mbG9hdBgDIAMoAhIZChFh",
              "bmFsb2dfaW5fZGF0YV90cxgEIAMoDRIUCgxkaWdpdGFsX2RhdGEYBSABKAwS",
              "FwoPZGlnaXRhbF9kYXRhX3RzGAYgAygNEhcKD2FuYWxvZ19vdXRfZGF0YRgH",
              "IAMoDRIVCg1kZXZpY2Vfc3RhdHVzGAggASgNEhIKCnB3cl9zdGF0dXMYCSAB",
              "KA0SEwoLYmF0dF9zdGF0dXMYCiABKA0SEwoLdGVtcF9zdGF0dXMYCyABKBES",
              "FgoOdGltZXN0YW1wX2ZyZXEYECABKA0SGgoSYW5hbG9nX2luX3BvcnRfbnVt",
              "GBEgASgNEh8KF2FuYWxvZ19pbl9wb3J0X251bV9wcml2GBIgASgNEhsKE2Fu",
              "YWxvZ19pbl9wb3J0X3R5cGUYEyABKAwSHQoVYW5hbG9nX2luX3BvcnRfYXZf",
              "cnNlGBQgASgMEhoKEmFuYWxvZ19pbl9wb3J0X3JzZRgVIAEoDBIeChZhbmFs",
              "b2dfaW5fcG9ydF9lbmFibGVkGBYgASgMEh8KF2FuYWxvZ19pbl9wb3J0X2F2",
              "X3JhbmdlGBcgAygCEiQKHGFuYWxvZ19pbl9wb3J0X2F2X3JhbmdlX3ByaXYY",
              "GCADKAISHAoUYW5hbG9nX2luX3BvcnRfcmFuZ2UYGSADKAISIQoZYW5hbG9n",
              "X2luX3BvcnRfcmFuZ2VfcHJpdhgaIAMoAhIVCg1hbmFsb2dfaW5fcmVzGBsg",
              "ASgNEhoKEmFuYWxvZ19pbl9yZXNfcHJpdhgcIAEoDRIdChVhbmFsb2dfaW5f",
              "aW50X3NjYWxlX20YHSADKAISIgoaYW5hbG9nX2luX2ludF9zY2FsZV9tX3By",
              "aXYYHiADKAISFwoPYW5hbG9nX2luX2NhbF9tGB8gAygCEhcKD2FuYWxvZ19p",
              "bl9jYWxfYhggIAMoAhIcChRhbmFsb2dfaW5fY2FsX21fcHJpdhghIAMoAhIc",
              "ChRhbmFsb2dfaW5fY2FsX2JfcHJpdhgiIAMoAhIYChBkaWdpdGFsX3BvcnRf",
              "bnVtGCMgASgNEhkKEWRpZ2l0YWxfcG9ydF90eXBlGCQgASgMEhgKEGRpZ2l0",
              "YWxfcG9ydF9kaXIYJSABKAwSGwoTYW5hbG9nX291dF9wb3J0X251bRgmIAEo",
              "DRIcChRhbmFsb2dfb3V0X3BvcnRfdHlwZRgnIAEoDBIWCg5hbmFsb2dfb3V0",
              "X3JlcxgoIAEoDRIgChhhbmFsb2dfb3V0X3BvcnRfYXZfcmFuZ2UYKSADKAIS",
              "HQoVYW5hbG9nX291dF9wb3J0X3JhbmdlGCogASgCEg8KB2lwX2FkZHIYKyAB",
              "KAwSEAoIbmV0X21hc2sYLCABKAwSDwoHZ2F0ZXdheRgtIAEoDBITCgtwcmlt",
              "YXJ5X2RucxguIAEoDBIVCg1zZWNvbmRhcnlfZG5zGC8gASgMEhAKCG1hY19h",
              "ZGRyGDAgASgMEhIKCmlwX2FkZHJfdjYYMSABKAwSGQoRc3ViX3ByZV9sZW5n",
              "dGhfdjYYMiABKAwSEgoKZ2F0ZXdheV92NhgzIAEoDBIWCg5wcmltYXJ5X2Ru",
              "c192Nhg0IAEoDBIYChBzZWNvbmRhcnlfZG5zX3Y2GDUgASgMEg4KBmV1aV82",
              "NBg2IAEoDBIRCglob3N0X25hbWUYNyABKAkSEwoLZGV2aWNlX3BvcnQYOCAB",
              "KA0SHAoUZnJpZW5kbHlfZGV2aWNlX25hbWUYOSABKAkSDAoEc3NpZBg6IAEo",
              "CRIVCg1zc2lkX3N0cmVuZ3RoGDsgASgNEhoKEndpZmlfc2VjdXJpdHlfbW9k",
              "ZRg8IAEoDRIVCg13aWZpX2luZl9tb2RlGD0gASgNEg8KB2F2X3NzaWQYPiAD",
              "KAkSGAoQYXZfc3NpZF9zdHJlbmd0aBg/IAMoDRIdChVhdl93aWZpX3NlY3Vy",
              "aXR5X21vZGUYQCADKA0SGAoQYXZfd2lmaV9pbmZfbW9kZRhBIAMoDRIRCglk",
              "ZXZpY2VfcG4YQiABKAkSFQoNZGV2aWNlX2h3X3JldhhDIAEoCRIVCg1kZXZp",
              "Y2VfZndfcmV2GEQgASgJEhEKCWRldmljZV9zbhhFIAEoBEIuChpjb20uZGFx",
              "aWZpLmNvbW1vbi5tZXNzYWdlc0IOUHJvdG9NZXNzYWdlVjJIA2IGcHJvdG8z"));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DaqifiOutMessage), global::DaqifiOutMessage.Parser, new[]{ "MsgTimeStamp", "AnalogInData", "AnalogInDataFloat", "AnalogInDataTs", "DigitalData", "DigitalDataTs", "AnalogOutData", "DeviceStatus", "PwrStatus", "BattStatus", "TempStatus", "TimestampFreq", "AnalogInPortNum", "AnalogInPortNumPriv", "AnalogInPortType", "AnalogInPortAvRse", "AnalogInPortRse", "AnalogInPortEnabled", "AnalogInPortAvRange", "AnalogInPortAvRangePriv", "AnalogInPortRange", "AnalogInPortRangePriv", "AnalogInRes", "AnalogInResPriv", "AnalogInIntScaleM", "AnalogInIntScaleMPriv", "AnalogInCalM", "AnalogInCalB", "AnalogInCalMPriv", "AnalogInCalBPriv", "DigitalPortNum", "DigitalPortType", "DigitalPortDir", "AnalogOutPortNum", "AnalogOutPortType", "AnalogOutRes", "AnalogOutPortAvRange", "AnalogOutPortRange", "IpAddr", "NetMask", "Gateway", "PrimaryDns", "SecondaryDns", "MacAddr", "IpAddrV6", "SubPreLengthV6", "GatewayV6", "PrimaryDnsV6", "SecondaryDnsV6", "Eui64", "HostName", "DevicePort", "FriendlyDeviceName", "Ssid", "SsidStrength", "WifiSecurityMode", "WifiInfMode", "AvSsid", "AvSsidStrength", "AvWifiSecurityMode", "AvWifiInfMode", "DevicePn", "DeviceHwRev", "DeviceFwRev", "DeviceSn" }, null, null, null, null)
            }));
    }
    #endregion

}
#region Messages
/// <summary>
/// Put repetitive information in first 15 fields to keep encoded data as short as possible
/// </summary>
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class DaqifiOutMessage : pb::IMessage<DaqifiOutMessage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
    private static readonly pb::MessageParser<DaqifiOutMessage> _parser = new pb::MessageParser<DaqifiOutMessage>(() => new DaqifiOutMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DaqifiOutMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::DaqifiOutMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DaqifiOutMessage()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DaqifiOutMessage(DaqifiOutMessage other) : this()
    {
        msgTimeStamp_ = other.msgTimeStamp_;
        analogInData_ = other.analogInData_.Clone();
        analogInDataFloat_ = other.analogInDataFloat_.Clone();
        analogInDataTs_ = other.analogInDataTs_.Clone();
        digitalData_ = other.digitalData_;
        digitalDataTs_ = other.digitalDataTs_.Clone();
        analogOutData_ = other.analogOutData_.Clone();
        deviceStatus_ = other.deviceStatus_;
        pwrStatus_ = other.pwrStatus_;
        battStatus_ = other.battStatus_;
        tempStatus_ = other.tempStatus_;
        timestampFreq_ = other.timestampFreq_;
        analogInPortNum_ = other.analogInPortNum_;
        analogInPortNumPriv_ = other.analogInPortNumPriv_;
        analogInPortType_ = other.analogInPortType_;
        analogInPortAvRse_ = other.analogInPortAvRse_;
        analogInPortRse_ = other.analogInPortRse_;
        analogInPortEnabled_ = other.analogInPortEnabled_;
        analogInPortAvRange_ = other.analogInPortAvRange_.Clone();
        analogInPortAvRangePriv_ = other.analogInPortAvRangePriv_.Clone();
        analogInPortRange_ = other.analogInPortRange_.Clone();
        analogInPortRangePriv_ = other.analogInPortRangePriv_.Clone();
        analogInRes_ = other.analogInRes_;
        analogInResPriv_ = other.analogInResPriv_;
        analogInIntScaleM_ = other.analogInIntScaleM_.Clone();
        analogInIntScaleMPriv_ = other.analogInIntScaleMPriv_.Clone();
        analogInCalM_ = other.analogInCalM_.Clone();
        analogInCalB_ = other.analogInCalB_.Clone();
        analogInCalMPriv_ = other.analogInCalMPriv_.Clone();
        analogInCalBPriv_ = other.analogInCalBPriv_.Clone();
        digitalPortNum_ = other.digitalPortNum_;
        digitalPortType_ = other.digitalPortType_;
        digitalPortDir_ = other.digitalPortDir_;
        analogOutPortNum_ = other.analogOutPortNum_;
        analogOutPortType_ = other.analogOutPortType_;
        analogOutRes_ = other.analogOutRes_;
        analogOutPortAvRange_ = other.analogOutPortAvRange_.Clone();
        analogOutPortRange_ = other.analogOutPortRange_;
        ipAddr_ = other.ipAddr_;
        netMask_ = other.netMask_;
        gateway_ = other.gateway_;
        primaryDns_ = other.primaryDns_;
        secondaryDns_ = other.secondaryDns_;
        macAddr_ = other.macAddr_;
        ipAddrV6_ = other.ipAddrV6_;
        subPreLengthV6_ = other.subPreLengthV6_;
        gatewayV6_ = other.gatewayV6_;
        primaryDnsV6_ = other.primaryDnsV6_;
        secondaryDnsV6_ = other.secondaryDnsV6_;
        eui64_ = other.eui64_;
        hostName_ = other.hostName_;
        devicePort_ = other.devicePort_;
        friendlyDeviceName_ = other.friendlyDeviceName_;
        ssid_ = other.ssid_;
        ssidStrength_ = other.ssidStrength_;
        wifiSecurityMode_ = other.wifiSecurityMode_;
        wifiInfMode_ = other.wifiInfMode_;
        avSsid_ = other.avSsid_.Clone();
        avSsidStrength_ = other.avSsidStrength_.Clone();
        avWifiSecurityMode_ = other.avWifiSecurityMode_.Clone();
        avWifiInfMode_ = other.avWifiInfMode_.Clone();
        devicePn_ = other.devicePn_;
        deviceHwRev_ = other.deviceHwRev_;
        deviceFwRev_ = other.deviceFwRev_;
        deviceSn_ = other.deviceSn_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DaqifiOutMessage Clone()
    {
        return new DaqifiOutMessage(this);
    }

    /// <summary>Field number for the "msg_time_stamp" field.</summary>
    public const int MsgTimeStampFieldNumber = 1;
    private uint msgTimeStamp_;
    /// <summary>
    /// Begin streaming data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MsgTimeStamp
    {
        get { return msgTimeStamp_; }
        set
        {
            msgTimeStamp_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_data" field.</summary>
    public const int AnalogInDataFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_analogInData_codec
        = pb::FieldCodec.ForSInt32(18);
    private readonly pbc::RepeatedField<int> analogInData_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Analog in data int (maximum 24bit/ch) (available to user)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> AnalogInData
    {
        get { return analogInData_; }
    }

    /// <summary>Field number for the "analog_in_data_float" field.</summary>
    public const int AnalogInDataFloatFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_analogInDataFloat_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> analogInDataFloat_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in data float (after cal calcs)(available to user)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInDataFloat
    {
        get { return analogInDataFloat_; }
    }

    /// <summary>Field number for the "analog_in_data_ts" field.</summary>
    public const int AnalogInDataTsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_analogInDataTs_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> analogInDataTs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Analog in data timestamp offset (value should be added to msg_time_stamp for absolute timestamp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AnalogInDataTs
    {
        get { return analogInDataTs_; }
    }

    /// <summary>Field number for the "digital_data" field.</summary>
    public const int DigitalDataFieldNumber = 5;
    private pb::ByteString digitalData_ = pb::ByteString.Empty;
    /// <summary>
    /// Digital IO data (bitwise binary representation LSB=ch0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DigitalData
    {
        get { return digitalData_; }
        set
        {
            digitalData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "digital_data_ts" field.</summary>
    public const int DigitalDataTsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_digitalDataTs_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> digitalDataTs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Digital IO data timestamp offset (value should be added to msg_time_stamp for absolute timestamp)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> DigitalDataTs
    {
        get { return digitalDataTs_; }
    }

    /// <summary>Field number for the "analog_out_data" field.</summary>
    public const int AnalogOutDataFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_analogOutData_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> analogOutData_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Analog out data int (maximum 12bit/ch)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AnalogOutData
    {
        get { return analogOutData_; }
    }

    /// <summary>Field number for the "device_status" field.</summary>
    public const int DeviceStatusFieldNumber = 8;
    private uint deviceStatus_;
    /// <summary>
    /// Device status word
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DeviceStatus
    {
        get { return deviceStatus_; }
        set
        {
            deviceStatus_ = value;
        }
    }

    /// <summary>Field number for the "pwr_status" field.</summary>
    public const int PwrStatusFieldNumber = 9;
    private uint pwrStatus_;
    /// <summary>
    /// Power status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PwrStatus
    {
        get { return pwrStatus_; }
        set
        {
            pwrStatus_ = value;
        }
    }

    /// <summary>Field number for the "batt_status" field.</summary>
    public const int BattStatusFieldNumber = 10;
    private uint battStatus_;
    /// <summary>
    /// Battery charge percent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BattStatus
    {
        get { return battStatus_; }
        set
        {
            battStatus_ = value;
        }
    }

    /// <summary>Field number for the "temp_status" field.</summary>
    public const int TempStatusFieldNumber = 11;
    private int tempStatus_;
    /// <summary>
    /// Board temperature in deg C
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TempStatus
    {
        get { return tempStatus_; }
        set
        {
            tempStatus_ = value;
        }
    }

    /// <summary>Field number for the "timestamp_freq" field.</summary>
    public const int TimestampFreqFieldNumber = 16;
    private uint timestampFreq_;
    /// <summary>
    /// Frequency of the timestamp counter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TimestampFreq
    {
        get { return timestampFreq_; }
        set
        {
            timestampFreq_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_port_num" field.</summary>
    public const int AnalogInPortNumFieldNumber = 17;
    private uint analogInPortNum_;
    /// <summary>
    /// Analog In Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogInPortNum
    {
        get { return analogInPortNum_; }
        set
        {
            analogInPortNum_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_port_num_priv" field.</summary>
    public const int AnalogInPortNumPrivFieldNumber = 18;
    private uint analogInPortNumPriv_;
    /// <summary>
    /// Number of analog in ports (private)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogInPortNumPriv
    {
        get { return analogInPortNumPriv_; }
        set
        {
            analogInPortNumPriv_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_port_type" field.</summary>
    public const int AnalogInPortTypeFieldNumber = 19;
    private pb::ByteString analogInPortType_ = pb::ByteString.Empty;
    /// <summary>
    /// Analog in port type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AnalogInPortType
    {
        get { return analogInPortType_; }
        set
        {
            analogInPortType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_in_port_av_rse" field.</summary>
    public const int AnalogInPortAvRseFieldNumber = 20;
    private pb::ByteString analogInPortAvRse_ = pb::ByteString.Empty;
    /// <summary>
    /// Analog in port referenced single ended (RSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AnalogInPortAvRse
    {
        get { return analogInPortAvRse_; }
        set
        {
            analogInPortAvRse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_in_port_rse" field.</summary>
    public const int AnalogInPortRseFieldNumber = 21;
    private pb::ByteString analogInPortRse_ = pb::ByteString.Empty;
    /// <summary>
    /// Analog in port referenced single ended (RSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AnalogInPortRse
    {
        get { return analogInPortRse_; }
        set
        {
            analogInPortRse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_in_port_enabled" field.</summary>
    public const int AnalogInPortEnabledFieldNumber = 22;
    private pb::ByteString analogInPortEnabled_ = pb::ByteString.Empty;
    /// <summary>
    /// Analog in port enabled list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AnalogInPortEnabled
    {
        get { return analogInPortEnabled_; }
        set
        {
            analogInPortEnabled_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_in_port_av_range" field.</summary>
    public const int AnalogInPortAvRangeFieldNumber = 23;
    private static readonly pb::FieldCodec<float> _repeated_analogInPortAvRange_codec
        = pb::FieldCodec.ForFloat(186);
    private readonly pbc::RepeatedField<float> analogInPortAvRange_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in port voltage range (volts span:RSE 0 to range, NON-RSE -(range/2) to (range/2))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInPortAvRange
    {
        get { return analogInPortAvRange_; }
    }

    /// <summary>Field number for the "analog_in_port_av_range_priv" field.</summary>
    public const int AnalogInPortAvRangePrivFieldNumber = 24;
    private static readonly pb::FieldCodec<float> _repeated_analogInPortAvRangePriv_codec
        = pb::FieldCodec.ForFloat(194);
    private readonly pbc::RepeatedField<float> analogInPortAvRangePriv_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Private analog in port voltage range (volts span:RSE 0 to range, NON-RSE -(range/2) to (range/2))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInPortAvRangePriv
    {
        get { return analogInPortAvRangePriv_; }
    }

    /// <summary>Field number for the "analog_in_port_range" field.</summary>
    public const int AnalogInPortRangeFieldNumber = 25;
    private static readonly pb::FieldCodec<float> _repeated_analogInPortRange_codec
        = pb::FieldCodec.ForFloat(202);
    private readonly pbc::RepeatedField<float> analogInPortRange_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in port voltage range (volts span:RSE 0 to range, NON-RSE -(range/2) to (range/2))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInPortRange
    {
        get { return analogInPortRange_; }
    }

    /// <summary>Field number for the "analog_in_port_range_priv" field.</summary>
    public const int AnalogInPortRangePrivFieldNumber = 26;
    private static readonly pb::FieldCodec<float> _repeated_analogInPortRangePriv_codec
        = pb::FieldCodec.ForFloat(210);
    private readonly pbc::RepeatedField<float> analogInPortRangePriv_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Private analog in port voltage range (volts span:RSE 0 to range, NON-RSE -(range/2) to (range/2))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInPortRangePriv
    {
        get { return analogInPortRangePriv_; }
    }

    /// <summary>Field number for the "analog_in_res" field.</summary>
    public const int AnalogInResFieldNumber = 27;
    private uint analogInRes_;
    /// <summary>
    /// Public analog in (ADC) resolution (bits used to convert from integer value to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogInRes
    {
        get { return analogInRes_; }
        set
        {
            analogInRes_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_res_priv" field.</summary>
    public const int AnalogInResPrivFieldNumber = 28;
    private uint analogInResPriv_;
    /// <summary>
    /// Private analog in (ADC) resolution (bits used to convert from integer value to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogInResPriv
    {
        get { return analogInResPriv_; }
        set
        {
            analogInResPriv_ = value;
        }
    }

    /// <summary>Field number for the "analog_in_int_scale_m" field.</summary>
    public const int AnalogInIntScaleMFieldNumber = 29;
    private static readonly pb::FieldCodec<float> _repeated_analogInIntScaleM_codec
        = pb::FieldCodec.ForFloat(234);
    private readonly pbc::RepeatedField<float> analogInIntScaleM_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in port internal scale m value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInIntScaleM
    {
        get { return analogInIntScaleM_; }
    }

    /// <summary>Field number for the "analog_in_int_scale_m_priv" field.</summary>
    public const int AnalogInIntScaleMPrivFieldNumber = 30;
    private static readonly pb::FieldCodec<float> _repeated_analogInIntScaleMPriv_codec
        = pb::FieldCodec.ForFloat(242);
    private readonly pbc::RepeatedField<float> analogInIntScaleMPriv_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Private analog in port internal scale m value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInIntScaleMPriv
    {
        get { return analogInIntScaleMPriv_; }
    }

    /// <summary>Field number for the "analog_in_cal_m" field.</summary>
    public const int AnalogInCalMFieldNumber = 31;
    private static readonly pb::FieldCodec<float> _repeated_analogInCalM_codec
        = pb::FieldCodec.ForFloat(250);
    private readonly pbc::RepeatedField<float> analogInCalM_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in port calibration m value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInCalM
    {
        get { return analogInCalM_; }
    }

    /// <summary>Field number for the "analog_in_cal_b" field.</summary>
    public const int AnalogInCalBFieldNumber = 32;
    private static readonly pb::FieldCodec<float> _repeated_analogInCalB_codec
        = pb::FieldCodec.ForFloat(258);
    private readonly pbc::RepeatedField<float> analogInCalB_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog in port calibration b value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInCalB
    {
        get { return analogInCalB_; }
    }

    /// <summary>Field number for the "analog_in_cal_m_priv" field.</summary>
    public const int AnalogInCalMPrivFieldNumber = 33;
    private static readonly pb::FieldCodec<float> _repeated_analogInCalMPriv_codec
        = pb::FieldCodec.ForFloat(266);
    private readonly pbc::RepeatedField<float> analogInCalMPriv_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Private analog in port calibration m value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInCalMPriv
    {
        get { return analogInCalMPriv_; }
    }

    /// <summary>Field number for the "analog_in_cal_b_priv" field.</summary>
    public const int AnalogInCalBPrivFieldNumber = 34;
    private static readonly pb::FieldCodec<float> _repeated_analogInCalBPriv_codec
        = pb::FieldCodec.ForFloat(274);
    private readonly pbc::RepeatedField<float> analogInCalBPriv_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Private analog in port calibration b value (should be applied to integer value before converting to volts)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogInCalBPriv
    {
        get { return analogInCalBPriv_; }
    }

    /// <summary>Field number for the "digital_port_num" field.</summary>
    public const int DigitalPortNumFieldNumber = 35;
    private uint digitalPortNum_;
    /// <summary>
    /// Digital I/O Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DigitalPortNum
    {
        get { return digitalPortNum_; }
        set
        {
            digitalPortNum_ = value;
        }
    }

    /// <summary>Field number for the "digital_port_type" field.</summary>
    public const int DigitalPortTypeFieldNumber = 36;
    private pb::ByteString digitalPortType_ = pb::ByteString.Empty;
    /// <summary>
    /// Digital IP port type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DigitalPortType
    {
        get { return digitalPortType_; }
        set
        {
            digitalPortType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "digital_port_dir" field.</summary>
    public const int DigitalPortDirFieldNumber = 37;
    private pb::ByteString digitalPortDir_ = pb::ByteString.Empty;
    /// <summary>
    /// Digital IO port direction (bitwise binary representation LSB=ch0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString DigitalPortDir
    {
        get { return digitalPortDir_; }
        set
        {
            digitalPortDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_out_port_num" field.</summary>
    public const int AnalogOutPortNumFieldNumber = 38;
    private uint analogOutPortNum_;
    /// <summary>
    /// Analog Out Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogOutPortNum
    {
        get { return analogOutPortNum_; }
        set
        {
            analogOutPortNum_ = value;
        }
    }

    /// <summary>Field number for the "analog_out_port_type" field.</summary>
    public const int AnalogOutPortTypeFieldNumber = 39;
    private pb::ByteString analogOutPortType_ = pb::ByteString.Empty;
    /// <summary>
    /// Type of analog out port (DAC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString AnalogOutPortType
    {
        get { return analogOutPortType_; }
        set
        {
            analogOutPortType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "analog_out_res" field.</summary>
    public const int AnalogOutResFieldNumber = 40;
    private uint analogOutRes_;
    /// <summary>
    /// Analog out port (DAC) resolution (bits)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AnalogOutRes
    {
        get { return analogOutRes_; }
        set
        {
            analogOutRes_ = value;
        }
    }

    /// <summary>Field number for the "analog_out_port_av_range" field.</summary>
    public const int AnalogOutPortAvRangeFieldNumber = 41;
    private static readonly pb::FieldCodec<float> _repeated_analogOutPortAvRange_codec
        = pb::FieldCodec.ForFloat(330);
    private readonly pbc::RepeatedField<float> analogOutPortAvRange_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Analog out port available range (volts span: 0 to range) (DAC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AnalogOutPortAvRange
    {
        get { return analogOutPortAvRange_; }
    }

    /// <summary>Field number for the "analog_out_port_range" field.</summary>
    public const int AnalogOutPortRangeFieldNumber = 42;
    private float analogOutPortRange_;
    /// <summary>
    /// Analog out port range (volts span: 0 to range) (DAC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AnalogOutPortRange
    {
        get { return analogOutPortRange_; }
        set
        {
            analogOutPortRange_ = value;
        }
    }

    /// <summary>Field number for the "ip_addr" field.</summary>
    public const int IpAddrFieldNumber = 43;
    private pb::ByteString ipAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 Device Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString IpAddr
    {
        get { return ipAddr_; }
        set
        {
            ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "net_mask" field.</summary>
    public const int NetMaskFieldNumber = 44;
    private pb::ByteString netMask_ = pb::ByteString.Empty;
    /// <summary>
    /// Network mask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString NetMask
    {
        get { return netMask_; }
        set
        {
            netMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "gateway" field.</summary>
    public const int GatewayFieldNumber = 45;
    private pb::ByteString gateway_ = pb::ByteString.Empty;
    /// <summary>
    /// Default gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Gateway
    {
        get { return gateway_; }
        set
        {
            gateway_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "primary_dns" field.</summary>
    public const int PrimaryDnsFieldNumber = 46;
    private pb::ByteString primaryDns_ = pb::ByteString.Empty;
    /// <summary>
    /// Primary DNS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PrimaryDns
    {
        get { return primaryDns_; }
        set
        {
            primaryDns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "secondary_dns" field.</summary>
    public const int SecondaryDnsFieldNumber = 47;
    private pb::ByteString secondaryDns_ = pb::ByteString.Empty;
    /// <summary>
    /// Secondary DNS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SecondaryDns
    {
        get { return secondaryDns_; }
        set
        {
            secondaryDns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "mac_addr" field.</summary>
    public const int MacAddrFieldNumber = 48;
    private pb::ByteString macAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Device MAC address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString MacAddr
    {
        get { return macAddr_; }
        set
        {
            macAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "ip_addr_v6" field.</summary>
    public const int IpAddrV6FieldNumber = 49;
    private pb::ByteString ipAddrV6_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv6 Device Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString IpAddrV6
    {
        get { return ipAddrV6_; }
        set
        {
            ipAddrV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "sub_pre_length_v6" field.</summary>
    public const int SubPreLengthV6FieldNumber = 50;
    private pb::ByteString subPreLengthV6_ = pb::ByteString.Empty;
    /// <summary>
    /// Subnet prefix length v6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SubPreLengthV6
    {
        get { return subPreLengthV6_; }
        set
        {
            subPreLengthV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "gateway_v6" field.</summary>
    public const int GatewayV6FieldNumber = 51;
    private pb::ByteString gatewayV6_ = pb::ByteString.Empty;
    /// <summary>
    /// Default gateway v6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString GatewayV6
    {
        get { return gatewayV6_; }
        set
        {
            gatewayV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "primary_dns_v6" field.</summary>
    public const int PrimaryDnsV6FieldNumber = 52;
    private pb::ByteString primaryDnsV6_ = pb::ByteString.Empty;
    /// <summary>
    /// Primary DNS v6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PrimaryDnsV6
    {
        get { return primaryDnsV6_; }
        set
        {
            primaryDnsV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "secondary_dns_v6" field.</summary>
    public const int SecondaryDnsV6FieldNumber = 53;
    private pb::ByteString secondaryDnsV6_ = pb::ByteString.Empty;
    /// <summary>
    /// Secondary DNS v6
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SecondaryDnsV6
    {
        get { return secondaryDnsV6_; }
        set
        {
            secondaryDnsV6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "eui_64" field.</summary>
    public const int Eui64FieldNumber = 54;
    private pb::ByteString eui64_ = pb::ByteString.Empty;
    /// <summary>
    /// Device EUI-64 address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Eui64
    {
        get { return eui64_; }
        set
        {
            eui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 55;
    private string hostName_ = "";
    /// <summary>
    /// Device Network Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HostName
    {
        get { return hostName_; }
        set
        {
            hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "device_port" field.</summary>
    public const int DevicePortFieldNumber = 56;
    private uint devicePort_;
    /// <summary>
    /// Device port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DevicePort
    {
        get { return devicePort_; }
        set
        {
            devicePort_ = value;
        }
    }

    /// <summary>Field number for the "friendly_device_name" field.</summary>
    public const int FriendlyDeviceNameFieldNumber = 57;
    private string friendlyDeviceName_ = "";
    /// <summary>
    /// Device friendly name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FriendlyDeviceName
    {
        get { return friendlyDeviceName_; }
        set
        {
            friendlyDeviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "ssid" field.</summary>
    public const int SsidFieldNumber = 58;
    private string ssid_ = "";
    /// <summary>
    /// Current SSID device is to connect to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ssid
    {
        get { return ssid_; }
        set
        {
            ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "ssid_strength" field.</summary>
    public const int SsidStrengthFieldNumber = 59;
    private uint ssidStrength_;
    /// <summary>
    /// Current SSID strength out of 255
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SsidStrength
    {
        get { return ssidStrength_; }
        set
        {
            ssidStrength_ = value;
        }
    }

    /// <summary>Field number for the "wifi_security_mode" field.</summary>
    public const int WifiSecurityModeFieldNumber = 60;
    private uint wifiSecurityMode_;
    /// <summary>
    /// Device WiFi security mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WifiSecurityMode
    {
        get { return wifiSecurityMode_; }
        set
        {
            wifiSecurityMode_ = value;
        }
    }

    /// <summary>Field number for the "wifi_inf_mode" field.</summary>
    public const int WifiInfModeFieldNumber = 61;
    private uint wifiInfMode_;
    /// <summary>
    /// Current SSID infrastructure mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WifiInfMode
    {
        get { return wifiInfMode_; }
        set
        {
            wifiInfMode_ = value;
        }
    }

    /// <summary>Field number for the "av_ssid" field.</summary>
    public const int AvSsidFieldNumber = 62;
    private static readonly pb::FieldCodec<string> _repeated_avSsid_codec
        = pb::FieldCodec.ForString(498);
    private readonly pbc::RepeatedField<string> avSsid_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Available Network Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AvSsid
    {
        get { return avSsid_; }
    }

    /// <summary>Field number for the "av_ssid_strength" field.</summary>
    public const int AvSsidStrengthFieldNumber = 63;
    private static readonly pb::FieldCodec<uint> _repeated_avSsidStrength_codec
        = pb::FieldCodec.ForUInt32(506);
    private readonly pbc::RepeatedField<uint> avSsidStrength_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Available SSID strength out of 255
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AvSsidStrength
    {
        get { return avSsidStrength_; }
    }

    /// <summary>Field number for the "av_wifi_security_mode" field.</summary>
    public const int AvWifiSecurityModeFieldNumber = 64;
    private static readonly pb::FieldCodec<uint> _repeated_avWifiSecurityMode_codec
        = pb::FieldCodec.ForUInt32(514);
    private readonly pbc::RepeatedField<uint> avWifiSecurityMode_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Available WiFi network security mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AvWifiSecurityMode
    {
        get { return avWifiSecurityMode_; }
    }

    /// <summary>Field number for the "av_wifi_inf_mode" field.</summary>
    public const int AvWifiInfModeFieldNumber = 65;
    private static readonly pb::FieldCodec<uint> _repeated_avWifiInfMode_codec
        = pb::FieldCodec.ForUInt32(522);
    private readonly pbc::RepeatedField<uint> avWifiInfMode_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Available WiFi network infrastructure mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AvWifiInfMode
    {
        get { return avWifiInfMode_; }
    }

    /// <summary>Field number for the "device_pn" field.</summary>
    public const int DevicePnFieldNumber = 66;
    private string devicePn_ = "";
    /// <summary>
    /// Device Hardware/Firmware Information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DevicePn
    {
        get { return devicePn_; }
        set
        {
            devicePn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "device_hw_rev" field.</summary>
    public const int DeviceHwRevFieldNumber = 67;
    private string deviceHwRev_ = "";
    /// <summary>
    /// Device hardware revision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeviceHwRev
    {
        get { return deviceHwRev_; }
        set
        {
            deviceHwRev_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "device_fw_rev" field.</summary>
    public const int DeviceFwRevFieldNumber = 68;
    private string deviceFwRev_ = "";
    /// <summary>
    /// Device firmware revision
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeviceFwRev
    {
        get { return deviceFwRev_; }
        set
        {
            deviceFwRev_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "device_sn" field.</summary>
    public const int DeviceSnFieldNumber = 69;
    private ulong deviceSn_;
    /// <summary>
    /// Device serial number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DeviceSn
    {
        get { return deviceSn_; }
        set
        {
            deviceSn_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
        return Equals(other as DaqifiOutMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DaqifiOutMessage other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (MsgTimeStamp != other.MsgTimeStamp) return false;
        if (!analogInData_.Equals(other.analogInData_)) return false;
        if (!analogInDataFloat_.Equals(other.analogInDataFloat_)) return false;
        if (!analogInDataTs_.Equals(other.analogInDataTs_)) return false;
        if (DigitalData != other.DigitalData) return false;
        if (!digitalDataTs_.Equals(other.digitalDataTs_)) return false;
        if (!analogOutData_.Equals(other.analogOutData_)) return false;
        if (DeviceStatus != other.DeviceStatus) return false;
        if (PwrStatus != other.PwrStatus) return false;
        if (BattStatus != other.BattStatus) return false;
        if (TempStatus != other.TempStatus) return false;
        if (TimestampFreq != other.TimestampFreq) return false;
        if (AnalogInPortNum != other.AnalogInPortNum) return false;
        if (AnalogInPortNumPriv != other.AnalogInPortNumPriv) return false;
        if (AnalogInPortType != other.AnalogInPortType) return false;
        if (AnalogInPortAvRse != other.AnalogInPortAvRse) return false;
        if (AnalogInPortRse != other.AnalogInPortRse) return false;
        if (AnalogInPortEnabled != other.AnalogInPortEnabled) return false;
        if (!analogInPortAvRange_.Equals(other.analogInPortAvRange_)) return false;
        if (!analogInPortAvRangePriv_.Equals(other.analogInPortAvRangePriv_)) return false;
        if (!analogInPortRange_.Equals(other.analogInPortRange_)) return false;
        if (!analogInPortRangePriv_.Equals(other.analogInPortRangePriv_)) return false;
        if (AnalogInRes != other.AnalogInRes) return false;
        if (AnalogInResPriv != other.AnalogInResPriv) return false;
        if (!analogInIntScaleM_.Equals(other.analogInIntScaleM_)) return false;
        if (!analogInIntScaleMPriv_.Equals(other.analogInIntScaleMPriv_)) return false;
        if (!analogInCalM_.Equals(other.analogInCalM_)) return false;
        if (!analogInCalB_.Equals(other.analogInCalB_)) return false;
        if (!analogInCalMPriv_.Equals(other.analogInCalMPriv_)) return false;
        if (!analogInCalBPriv_.Equals(other.analogInCalBPriv_)) return false;
        if (DigitalPortNum != other.DigitalPortNum) return false;
        if (DigitalPortType != other.DigitalPortType) return false;
        if (DigitalPortDir != other.DigitalPortDir) return false;
        if (AnalogOutPortNum != other.AnalogOutPortNum) return false;
        if (AnalogOutPortType != other.AnalogOutPortType) return false;
        if (AnalogOutRes != other.AnalogOutRes) return false;
        if (!analogOutPortAvRange_.Equals(other.analogOutPortAvRange_)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnalogOutPortRange, other.AnalogOutPortRange)) return false;
        if (IpAddr != other.IpAddr) return false;
        if (NetMask != other.NetMask) return false;
        if (Gateway != other.Gateway) return false;
        if (PrimaryDns != other.PrimaryDns) return false;
        if (SecondaryDns != other.SecondaryDns) return false;
        if (MacAddr != other.MacAddr) return false;
        if (IpAddrV6 != other.IpAddrV6) return false;
        if (SubPreLengthV6 != other.SubPreLengthV6) return false;
        if (GatewayV6 != other.GatewayV6) return false;
        if (PrimaryDnsV6 != other.PrimaryDnsV6) return false;
        if (SecondaryDnsV6 != other.SecondaryDnsV6) return false;
        if (Eui64 != other.Eui64) return false;
        if (HostName != other.HostName) return false;
        if (DevicePort != other.DevicePort) return false;
        if (FriendlyDeviceName != other.FriendlyDeviceName) return false;
        if (Ssid != other.Ssid) return false;
        if (SsidStrength != other.SsidStrength) return false;
        if (WifiSecurityMode != other.WifiSecurityMode) return false;
        if (WifiInfMode != other.WifiInfMode) return false;
        if (!avSsid_.Equals(other.avSsid_)) return false;
        if (!avSsidStrength_.Equals(other.avSsidStrength_)) return false;
        if (!avWifiSecurityMode_.Equals(other.avWifiSecurityMode_)) return false;
        if (!avWifiInfMode_.Equals(other.avWifiInfMode_)) return false;
        if (DevicePn != other.DevicePn) return false;
        if (DeviceHwRev != other.DeviceHwRev) return false;
        if (DeviceFwRev != other.DeviceFwRev) return false;
        if (DeviceSn != other.DeviceSn) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
        int hash = 1;
        if (MsgTimeStamp != 0) hash ^= MsgTimeStamp.GetHashCode();
        hash ^= analogInData_.GetHashCode();
        hash ^= analogInDataFloat_.GetHashCode();
        hash ^= analogInDataTs_.GetHashCode();
        if (DigitalData.Length != 0) hash ^= DigitalData.GetHashCode();
        hash ^= digitalDataTs_.GetHashCode();
        hash ^= analogOutData_.GetHashCode();
        if (DeviceStatus != 0) hash ^= DeviceStatus.GetHashCode();
        if (PwrStatus != 0) hash ^= PwrStatus.GetHashCode();
        if (BattStatus != 0) hash ^= BattStatus.GetHashCode();
        if (TempStatus != 0) hash ^= TempStatus.GetHashCode();
        if (TimestampFreq != 0) hash ^= TimestampFreq.GetHashCode();
        if (AnalogInPortNum != 0) hash ^= AnalogInPortNum.GetHashCode();
        if (AnalogInPortNumPriv != 0) hash ^= AnalogInPortNumPriv.GetHashCode();
        if (AnalogInPortType.Length != 0) hash ^= AnalogInPortType.GetHashCode();
        if (AnalogInPortAvRse.Length != 0) hash ^= AnalogInPortAvRse.GetHashCode();
        if (AnalogInPortRse.Length != 0) hash ^= AnalogInPortRse.GetHashCode();
        if (AnalogInPortEnabled.Length != 0) hash ^= AnalogInPortEnabled.GetHashCode();
        hash ^= analogInPortAvRange_.GetHashCode();
        hash ^= analogInPortAvRangePriv_.GetHashCode();
        hash ^= analogInPortRange_.GetHashCode();
        hash ^= analogInPortRangePriv_.GetHashCode();
        if (AnalogInRes != 0) hash ^= AnalogInRes.GetHashCode();
        if (AnalogInResPriv != 0) hash ^= AnalogInResPriv.GetHashCode();
        hash ^= analogInIntScaleM_.GetHashCode();
        hash ^= analogInIntScaleMPriv_.GetHashCode();
        hash ^= analogInCalM_.GetHashCode();
        hash ^= analogInCalB_.GetHashCode();
        hash ^= analogInCalMPriv_.GetHashCode();
        hash ^= analogInCalBPriv_.GetHashCode();
        if (DigitalPortNum != 0) hash ^= DigitalPortNum.GetHashCode();
        if (DigitalPortType.Length != 0) hash ^= DigitalPortType.GetHashCode();
        if (DigitalPortDir.Length != 0) hash ^= DigitalPortDir.GetHashCode();
        if (AnalogOutPortNum != 0) hash ^= AnalogOutPortNum.GetHashCode();
        if (AnalogOutPortType.Length != 0) hash ^= AnalogOutPortType.GetHashCode();
        if (AnalogOutRes != 0) hash ^= AnalogOutRes.GetHashCode();
        hash ^= analogOutPortAvRange_.GetHashCode();
        if (AnalogOutPortRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnalogOutPortRange);
        if (IpAddr.Length != 0) hash ^= IpAddr.GetHashCode();
        if (NetMask.Length != 0) hash ^= NetMask.GetHashCode();
        if (Gateway.Length != 0) hash ^= Gateway.GetHashCode();
        if (PrimaryDns.Length != 0) hash ^= PrimaryDns.GetHashCode();
        if (SecondaryDns.Length != 0) hash ^= SecondaryDns.GetHashCode();
        if (MacAddr.Length != 0) hash ^= MacAddr.GetHashCode();
        if (IpAddrV6.Length != 0) hash ^= IpAddrV6.GetHashCode();
        if (SubPreLengthV6.Length != 0) hash ^= SubPreLengthV6.GetHashCode();
        if (GatewayV6.Length != 0) hash ^= GatewayV6.GetHashCode();
        if (PrimaryDnsV6.Length != 0) hash ^= PrimaryDnsV6.GetHashCode();
        if (SecondaryDnsV6.Length != 0) hash ^= SecondaryDnsV6.GetHashCode();
        if (Eui64.Length != 0) hash ^= Eui64.GetHashCode();
        if (HostName.Length != 0) hash ^= HostName.GetHashCode();
        if (DevicePort != 0) hash ^= DevicePort.GetHashCode();
        if (FriendlyDeviceName.Length != 0) hash ^= FriendlyDeviceName.GetHashCode();
        if (Ssid.Length != 0) hash ^= Ssid.GetHashCode();
        if (SsidStrength != 0) hash ^= SsidStrength.GetHashCode();
        if (WifiSecurityMode != 0) hash ^= WifiSecurityMode.GetHashCode();
        if (WifiInfMode != 0) hash ^= WifiInfMode.GetHashCode();
        hash ^= avSsid_.GetHashCode();
        hash ^= avSsidStrength_.GetHashCode();
        hash ^= avWifiSecurityMode_.GetHashCode();
        hash ^= avWifiInfMode_.GetHashCode();
        if (DevicePn.Length != 0) hash ^= DevicePn.GetHashCode();
        if (DeviceHwRev.Length != 0) hash ^= DeviceHwRev.GetHashCode();
        if (DeviceFwRev.Length != 0) hash ^= DeviceFwRev.GetHashCode();
        if (DeviceSn != 0UL) hash ^= DeviceSn.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
#else
    if (MsgTimeStamp != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(MsgTimeStamp);
    }
    analogInData_.WriteTo(output, _repeated_analogInData_codec);
    analogInDataFloat_.WriteTo(output, _repeated_analogInDataFloat_codec);
    analogInDataTs_.WriteTo(output, _repeated_analogInDataTs_codec);
    if (DigitalData.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(DigitalData);
    }
    digitalDataTs_.WriteTo(output, _repeated_digitalDataTs_codec);
    analogOutData_.WriteTo(output, _repeated_analogOutData_codec);
    if (DeviceStatus != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(DeviceStatus);
    }
    if (PwrStatus != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(PwrStatus);
    }
    if (BattStatus != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(BattStatus);
    }
    if (TempStatus != 0) {
      output.WriteRawTag(88);
      output.WriteSInt32(TempStatus);
    }
    if (TimestampFreq != 0) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(TimestampFreq);
    }
    if (AnalogInPortNum != 0) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(AnalogInPortNum);
    }
    if (AnalogInPortNumPriv != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(AnalogInPortNumPriv);
    }
    if (AnalogInPortType.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteBytes(AnalogInPortType);
    }
    if (AnalogInPortAvRse.Length != 0) {
      output.WriteRawTag(162, 1);
      output.WriteBytes(AnalogInPortAvRse);
    }
    if (AnalogInPortRse.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteBytes(AnalogInPortRse);
    }
    if (AnalogInPortEnabled.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteBytes(AnalogInPortEnabled);
    }
    analogInPortAvRange_.WriteTo(output, _repeated_analogInPortAvRange_codec);
    analogInPortAvRangePriv_.WriteTo(output, _repeated_analogInPortAvRangePriv_codec);
    analogInPortRange_.WriteTo(output, _repeated_analogInPortRange_codec);
    analogInPortRangePriv_.WriteTo(output, _repeated_analogInPortRangePriv_codec);
    if (AnalogInRes != 0) {
      output.WriteRawTag(216, 1);
      output.WriteUInt32(AnalogInRes);
    }
    if (AnalogInResPriv != 0) {
      output.WriteRawTag(224, 1);
      output.WriteUInt32(AnalogInResPriv);
    }
    analogInIntScaleM_.WriteTo(output, _repeated_analogInIntScaleM_codec);
    analogInIntScaleMPriv_.WriteTo(output, _repeated_analogInIntScaleMPriv_codec);
    analogInCalM_.WriteTo(output, _repeated_analogInCalM_codec);
    analogInCalB_.WriteTo(output, _repeated_analogInCalB_codec);
    analogInCalMPriv_.WriteTo(output, _repeated_analogInCalMPriv_codec);
    analogInCalBPriv_.WriteTo(output, _repeated_analogInCalBPriv_codec);
    if (DigitalPortNum != 0) {
      output.WriteRawTag(152, 2);
      output.WriteUInt32(DigitalPortNum);
    }
    if (DigitalPortType.Length != 0) {
      output.WriteRawTag(162, 2);
      output.WriteBytes(DigitalPortType);
    }
    if (DigitalPortDir.Length != 0) {
      output.WriteRawTag(170, 2);
      output.WriteBytes(DigitalPortDir);
    }
    if (AnalogOutPortNum != 0) {
      output.WriteRawTag(176, 2);
      output.WriteUInt32(AnalogOutPortNum);
    }
    if (AnalogOutPortType.Length != 0) {
      output.WriteRawTag(186, 2);
      output.WriteBytes(AnalogOutPortType);
    }
    if (AnalogOutRes != 0) {
      output.WriteRawTag(192, 2);
      output.WriteUInt32(AnalogOutRes);
    }
    analogOutPortAvRange_.WriteTo(output, _repeated_analogOutPortAvRange_codec);
    if (AnalogOutPortRange != 0F) {
      output.WriteRawTag(213, 2);
      output.WriteFloat(AnalogOutPortRange);
    }
    if (IpAddr.Length != 0) {
      output.WriteRawTag(218, 2);
      output.WriteBytes(IpAddr);
    }
    if (NetMask.Length != 0) {
      output.WriteRawTag(226, 2);
      output.WriteBytes(NetMask);
    }
    if (Gateway.Length != 0) {
      output.WriteRawTag(234, 2);
      output.WriteBytes(Gateway);
    }
    if (PrimaryDns.Length != 0) {
      output.WriteRawTag(242, 2);
      output.WriteBytes(PrimaryDns);
    }
    if (SecondaryDns.Length != 0) {
      output.WriteRawTag(250, 2);
      output.WriteBytes(SecondaryDns);
    }
    if (MacAddr.Length != 0) {
      output.WriteRawTag(130, 3);
      output.WriteBytes(MacAddr);
    }
    if (IpAddrV6.Length != 0) {
      output.WriteRawTag(138, 3);
      output.WriteBytes(IpAddrV6);
    }
    if (SubPreLengthV6.Length != 0) {
      output.WriteRawTag(146, 3);
      output.WriteBytes(SubPreLengthV6);
    }
    if (GatewayV6.Length != 0) {
      output.WriteRawTag(154, 3);
      output.WriteBytes(GatewayV6);
    }
    if (PrimaryDnsV6.Length != 0) {
      output.WriteRawTag(162, 3);
      output.WriteBytes(PrimaryDnsV6);
    }
    if (SecondaryDnsV6.Length != 0) {
      output.WriteRawTag(170, 3);
      output.WriteBytes(SecondaryDnsV6);
    }
    if (Eui64.Length != 0) {
      output.WriteRawTag(178, 3);
      output.WriteBytes(Eui64);
    }
    if (HostName.Length != 0) {
      output.WriteRawTag(186, 3);
      output.WriteString(HostName);
    }
    if (DevicePort != 0) {
      output.WriteRawTag(192, 3);
      output.WriteUInt32(DevicePort);
    }
    if (FriendlyDeviceName.Length != 0) {
      output.WriteRawTag(202, 3);
      output.WriteString(FriendlyDeviceName);
    }
    if (Ssid.Length != 0) {
      output.WriteRawTag(210, 3);
      output.WriteString(Ssid);
    }
    if (SsidStrength != 0) {
      output.WriteRawTag(216, 3);
      output.WriteUInt32(SsidStrength);
    }
    if (WifiSecurityMode != 0) {
      output.WriteRawTag(224, 3);
      output.WriteUInt32(WifiSecurityMode);
    }
    if (WifiInfMode != 0) {
      output.WriteRawTag(232, 3);
      output.WriteUInt32(WifiInfMode);
    }
    avSsid_.WriteTo(output, _repeated_avSsid_codec);
    avSsidStrength_.WriteTo(output, _repeated_avSsidStrength_codec);
    avWifiSecurityMode_.WriteTo(output, _repeated_avWifiSecurityMode_codec);
    avWifiInfMode_.WriteTo(output, _repeated_avWifiInfMode_codec);
    if (DevicePn.Length != 0) {
      output.WriteRawTag(146, 4);
      output.WriteString(DevicePn);
    }
    if (DeviceHwRev.Length != 0) {
      output.WriteRawTag(154, 4);
      output.WriteString(DeviceHwRev);
    }
    if (DeviceFwRev.Length != 0) {
      output.WriteRawTag(162, 4);
      output.WriteString(DeviceFwRev);
    }
    if (DeviceSn != 0UL) {
      output.WriteRawTag(168, 4);
      output.WriteUInt64(DeviceSn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
        if (MsgTimeStamp != 0)
        {
            output.WriteRawTag(8);
            output.WriteUInt32(MsgTimeStamp);
        }
        analogInData_.WriteTo(ref output, _repeated_analogInData_codec);
        analogInDataFloat_.WriteTo(ref output, _repeated_analogInDataFloat_codec);
        analogInDataTs_.WriteTo(ref output, _repeated_analogInDataTs_codec);
        if (DigitalData.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteBytes(DigitalData);
        }
        digitalDataTs_.WriteTo(ref output, _repeated_digitalDataTs_codec);
        analogOutData_.WriteTo(ref output, _repeated_analogOutData_codec);
        if (DeviceStatus != 0)
        {
            output.WriteRawTag(64);
            output.WriteUInt32(DeviceStatus);
        }
        if (PwrStatus != 0)
        {
            output.WriteRawTag(72);
            output.WriteUInt32(PwrStatus);
        }
        if (BattStatus != 0)
        {
            output.WriteRawTag(80);
            output.WriteUInt32(BattStatus);
        }
        if (TempStatus != 0)
        {
            output.WriteRawTag(88);
            output.WriteSInt32(TempStatus);
        }
        if (TimestampFreq != 0)
        {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(TimestampFreq);
        }
        if (AnalogInPortNum != 0)
        {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(AnalogInPortNum);
        }
        if (AnalogInPortNumPriv != 0)
        {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(AnalogInPortNumPriv);
        }
        if (AnalogInPortType.Length != 0)
        {
            output.WriteRawTag(154, 1);
            output.WriteBytes(AnalogInPortType);
        }
        if (AnalogInPortAvRse.Length != 0)
        {
            output.WriteRawTag(162, 1);
            output.WriteBytes(AnalogInPortAvRse);
        }
        if (AnalogInPortRse.Length != 0)
        {
            output.WriteRawTag(170, 1);
            output.WriteBytes(AnalogInPortRse);
        }
        if (AnalogInPortEnabled.Length != 0)
        {
            output.WriteRawTag(178, 1);
            output.WriteBytes(AnalogInPortEnabled);
        }
        analogInPortAvRange_.WriteTo(ref output, _repeated_analogInPortAvRange_codec);
        analogInPortAvRangePriv_.WriteTo(ref output, _repeated_analogInPortAvRangePriv_codec);
        analogInPortRange_.WriteTo(ref output, _repeated_analogInPortRange_codec);
        analogInPortRangePriv_.WriteTo(ref output, _repeated_analogInPortRangePriv_codec);
        if (AnalogInRes != 0)
        {
            output.WriteRawTag(216, 1);
            output.WriteUInt32(AnalogInRes);
        }
        if (AnalogInResPriv != 0)
        {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(AnalogInResPriv);
        }
        analogInIntScaleM_.WriteTo(ref output, _repeated_analogInIntScaleM_codec);
        analogInIntScaleMPriv_.WriteTo(ref output, _repeated_analogInIntScaleMPriv_codec);
        analogInCalM_.WriteTo(ref output, _repeated_analogInCalM_codec);
        analogInCalB_.WriteTo(ref output, _repeated_analogInCalB_codec);
        analogInCalMPriv_.WriteTo(ref output, _repeated_analogInCalMPriv_codec);
        analogInCalBPriv_.WriteTo(ref output, _repeated_analogInCalBPriv_codec);
        if (DigitalPortNum != 0)
        {
            output.WriteRawTag(152, 2);
            output.WriteUInt32(DigitalPortNum);
        }
        if (DigitalPortType.Length != 0)
        {
            output.WriteRawTag(162, 2);
            output.WriteBytes(DigitalPortType);
        }
        if (DigitalPortDir.Length != 0)
        {
            output.WriteRawTag(170, 2);
            output.WriteBytes(DigitalPortDir);
        }
        if (AnalogOutPortNum != 0)
        {
            output.WriteRawTag(176, 2);
            output.WriteUInt32(AnalogOutPortNum);
        }
        if (AnalogOutPortType.Length != 0)
        {
            output.WriteRawTag(186, 2);
            output.WriteBytes(AnalogOutPortType);
        }
        if (AnalogOutRes != 0)
        {
            output.WriteRawTag(192, 2);
            output.WriteUInt32(AnalogOutRes);
        }
        analogOutPortAvRange_.WriteTo(ref output, _repeated_analogOutPortAvRange_codec);
        if (AnalogOutPortRange != 0F)
        {
            output.WriteRawTag(213, 2);
            output.WriteFloat(AnalogOutPortRange);
        }
        if (IpAddr.Length != 0)
        {
            output.WriteRawTag(218, 2);
            output.WriteBytes(IpAddr);
        }
        if (NetMask.Length != 0)
        {
            output.WriteRawTag(226, 2);
            output.WriteBytes(NetMask);
        }
        if (Gateway.Length != 0)
        {
            output.WriteRawTag(234, 2);
            output.WriteBytes(Gateway);
        }
        if (PrimaryDns.Length != 0)
        {
            output.WriteRawTag(242, 2);
            output.WriteBytes(PrimaryDns);
        }
        if (SecondaryDns.Length != 0)
        {
            output.WriteRawTag(250, 2);
            output.WriteBytes(SecondaryDns);
        }
        if (MacAddr.Length != 0)
        {
            output.WriteRawTag(130, 3);
            output.WriteBytes(MacAddr);
        }
        if (IpAddrV6.Length != 0)
        {
            output.WriteRawTag(138, 3);
            output.WriteBytes(IpAddrV6);
        }
        if (SubPreLengthV6.Length != 0)
        {
            output.WriteRawTag(146, 3);
            output.WriteBytes(SubPreLengthV6);
        }
        if (GatewayV6.Length != 0)
        {
            output.WriteRawTag(154, 3);
            output.WriteBytes(GatewayV6);
        }
        if (PrimaryDnsV6.Length != 0)
        {
            output.WriteRawTag(162, 3);
            output.WriteBytes(PrimaryDnsV6);
        }
        if (SecondaryDnsV6.Length != 0)
        {
            output.WriteRawTag(170, 3);
            output.WriteBytes(SecondaryDnsV6);
        }
        if (Eui64.Length != 0)
        {
            output.WriteRawTag(178, 3);
            output.WriteBytes(Eui64);
        }
        if (HostName.Length != 0)
        {
            output.WriteRawTag(186, 3);
            output.WriteString(HostName);
        }
        if (DevicePort != 0)
        {
            output.WriteRawTag(192, 3);
            output.WriteUInt32(DevicePort);
        }
        if (FriendlyDeviceName.Length != 0)
        {
            output.WriteRawTag(202, 3);
            output.WriteString(FriendlyDeviceName);
        }
        if (Ssid.Length != 0)
        {
            output.WriteRawTag(210, 3);
            output.WriteString(Ssid);
        }
        if (SsidStrength != 0)
        {
            output.WriteRawTag(216, 3);
            output.WriteUInt32(SsidStrength);
        }
        if (WifiSecurityMode != 0)
        {
            output.WriteRawTag(224, 3);
            output.WriteUInt32(WifiSecurityMode);
        }
        if (WifiInfMode != 0)
        {
            output.WriteRawTag(232, 3);
            output.WriteUInt32(WifiInfMode);
        }
        avSsid_.WriteTo(ref output, _repeated_avSsid_codec);
        avSsidStrength_.WriteTo(ref output, _repeated_avSsidStrength_codec);
        avWifiSecurityMode_.WriteTo(ref output, _repeated_avWifiSecurityMode_codec);
        avWifiInfMode_.WriteTo(ref output, _repeated_avWifiInfMode_codec);
        if (DevicePn.Length != 0)
        {
            output.WriteRawTag(146, 4);
            output.WriteString(DevicePn);
        }
        if (DeviceHwRev.Length != 0)
        {
            output.WriteRawTag(154, 4);
            output.WriteString(DeviceHwRev);
        }
        if (DeviceFwRev.Length != 0)
        {
            output.WriteRawTag(162, 4);
            output.WriteString(DeviceFwRev);
        }
        if (DeviceSn != 0UL)
        {
            output.WriteRawTag(168, 4);
            output.WriteUInt64(DeviceSn);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(ref output);
        }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
        int size = 0;
        if (MsgTimeStamp != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgTimeStamp);
        }
        size += analogInData_.CalculateSize(_repeated_analogInData_codec);
        size += analogInDataFloat_.CalculateSize(_repeated_analogInDataFloat_codec);
        size += analogInDataTs_.CalculateSize(_repeated_analogInDataTs_codec);
        if (DigitalData.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(DigitalData);
        }
        size += digitalDataTs_.CalculateSize(_repeated_digitalDataTs_codec);
        size += analogOutData_.CalculateSize(_repeated_analogOutData_codec);
        if (DeviceStatus != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceStatus);
        }
        if (PwrStatus != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PwrStatus);
        }
        if (BattStatus != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattStatus);
        }
        if (TempStatus != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TempStatus);
        }
        if (TimestampFreq != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimestampFreq);
        }
        if (AnalogInPortNum != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogInPortNum);
        }
        if (AnalogInPortNumPriv != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogInPortNumPriv);
        }
        if (AnalogInPortType.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(AnalogInPortType);
        }
        if (AnalogInPortAvRse.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(AnalogInPortAvRse);
        }
        if (AnalogInPortRse.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(AnalogInPortRse);
        }
        if (AnalogInPortEnabled.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(AnalogInPortEnabled);
        }
        size += analogInPortAvRange_.CalculateSize(_repeated_analogInPortAvRange_codec);
        size += analogInPortAvRangePriv_.CalculateSize(_repeated_analogInPortAvRangePriv_codec);
        size += analogInPortRange_.CalculateSize(_repeated_analogInPortRange_codec);
        size += analogInPortRangePriv_.CalculateSize(_repeated_analogInPortRangePriv_codec);
        if (AnalogInRes != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogInRes);
        }
        if (AnalogInResPriv != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogInResPriv);
        }
        size += analogInIntScaleM_.CalculateSize(_repeated_analogInIntScaleM_codec);
        size += analogInIntScaleMPriv_.CalculateSize(_repeated_analogInIntScaleMPriv_codec);
        size += analogInCalM_.CalculateSize(_repeated_analogInCalM_codec);
        size += analogInCalB_.CalculateSize(_repeated_analogInCalB_codec);
        size += analogInCalMPriv_.CalculateSize(_repeated_analogInCalMPriv_codec);
        size += analogInCalBPriv_.CalculateSize(_repeated_analogInCalBPriv_codec);
        if (DigitalPortNum != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DigitalPortNum);
        }
        if (DigitalPortType.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(DigitalPortType);
        }
        if (DigitalPortDir.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(DigitalPortDir);
        }
        if (AnalogOutPortNum != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogOutPortNum);
        }
        if (AnalogOutPortType.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(AnalogOutPortType);
        }
        if (AnalogOutRes != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogOutRes);
        }
        size += analogOutPortAvRange_.CalculateSize(_repeated_analogOutPortAvRange_codec);
        if (AnalogOutPortRange != 0F)
        {
            size += 2 + 4;
        }
        if (IpAddr.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpAddr);
        }
        if (NetMask.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(NetMask);
        }
        if (Gateway.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(Gateway);
        }
        if (PrimaryDns.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrimaryDns);
        }
        if (SecondaryDns.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(SecondaryDns);
        }
        if (MacAddr.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(MacAddr);
        }
        if (IpAddrV6.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpAddrV6);
        }
        if (SubPreLengthV6.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(SubPreLengthV6);
        }
        if (GatewayV6.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(GatewayV6);
        }
        if (PrimaryDnsV6.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(PrimaryDnsV6);
        }
        if (SecondaryDnsV6.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(SecondaryDnsV6);
        }
        if (Eui64.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(Eui64);
        }
        if (HostName.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(HostName);
        }
        if (DevicePort != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DevicePort);
        }
        if (FriendlyDeviceName.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(FriendlyDeviceName);
        }
        if (Ssid.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Ssid);
        }
        if (SsidStrength != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SsidStrength);
        }
        if (WifiSecurityMode != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WifiSecurityMode);
        }
        if (WifiInfMode != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WifiInfMode);
        }
        size += avSsid_.CalculateSize(_repeated_avSsid_codec);
        size += avSsidStrength_.CalculateSize(_repeated_avSsidStrength_codec);
        size += avWifiSecurityMode_.CalculateSize(_repeated_avWifiSecurityMode_codec);
        size += avWifiInfMode_.CalculateSize(_repeated_avWifiInfMode_codec);
        if (DevicePn.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DevicePn);
        }
        if (DeviceHwRev.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceHwRev);
        }
        if (DeviceFwRev.Length != 0)
        {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceFwRev);
        }
        if (DeviceSn != 0UL)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DeviceSn);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DaqifiOutMessage other)
    {
        if (other == null)
        {
            return;
        }
        if (other.MsgTimeStamp != 0)
        {
            MsgTimeStamp = other.MsgTimeStamp;
        }
        analogInData_.Add(other.analogInData_);
        analogInDataFloat_.Add(other.analogInDataFloat_);
        analogInDataTs_.Add(other.analogInDataTs_);
        if (other.DigitalData.Length != 0)
        {
            DigitalData = other.DigitalData;
        }
        digitalDataTs_.Add(other.digitalDataTs_);
        analogOutData_.Add(other.analogOutData_);
        if (other.DeviceStatus != 0)
        {
            DeviceStatus = other.DeviceStatus;
        }
        if (other.PwrStatus != 0)
        {
            PwrStatus = other.PwrStatus;
        }
        if (other.BattStatus != 0)
        {
            BattStatus = other.BattStatus;
        }
        if (other.TempStatus != 0)
        {
            TempStatus = other.TempStatus;
        }
        if (other.TimestampFreq != 0)
        {
            TimestampFreq = other.TimestampFreq;
        }
        if (other.AnalogInPortNum != 0)
        {
            AnalogInPortNum = other.AnalogInPortNum;
        }
        if (other.AnalogInPortNumPriv != 0)
        {
            AnalogInPortNumPriv = other.AnalogInPortNumPriv;
        }
        if (other.AnalogInPortType.Length != 0)
        {
            AnalogInPortType = other.AnalogInPortType;
        }
        if (other.AnalogInPortAvRse.Length != 0)
        {
            AnalogInPortAvRse = other.AnalogInPortAvRse;
        }
        if (other.AnalogInPortRse.Length != 0)
        {
            AnalogInPortRse = other.AnalogInPortRse;
        }
        if (other.AnalogInPortEnabled.Length != 0)
        {
            AnalogInPortEnabled = other.AnalogInPortEnabled;
        }
        analogInPortAvRange_.Add(other.analogInPortAvRange_);
        analogInPortAvRangePriv_.Add(other.analogInPortAvRangePriv_);
        analogInPortRange_.Add(other.analogInPortRange_);
        analogInPortRangePriv_.Add(other.analogInPortRangePriv_);
        if (other.AnalogInRes != 0)
        {
            AnalogInRes = other.AnalogInRes;
        }
        if (other.AnalogInResPriv != 0)
        {
            AnalogInResPriv = other.AnalogInResPriv;
        }
        analogInIntScaleM_.Add(other.analogInIntScaleM_);
        analogInIntScaleMPriv_.Add(other.analogInIntScaleMPriv_);
        analogInCalM_.Add(other.analogInCalM_);
        analogInCalB_.Add(other.analogInCalB_);
        analogInCalMPriv_.Add(other.analogInCalMPriv_);
        analogInCalBPriv_.Add(other.analogInCalBPriv_);
        if (other.DigitalPortNum != 0)
        {
            DigitalPortNum = other.DigitalPortNum;
        }
        if (other.DigitalPortType.Length != 0)
        {
            DigitalPortType = other.DigitalPortType;
        }
        if (other.DigitalPortDir.Length != 0)
        {
            DigitalPortDir = other.DigitalPortDir;
        }
        if (other.AnalogOutPortNum != 0)
        {
            AnalogOutPortNum = other.AnalogOutPortNum;
        }
        if (other.AnalogOutPortType.Length != 0)
        {
            AnalogOutPortType = other.AnalogOutPortType;
        }
        if (other.AnalogOutRes != 0)
        {
            AnalogOutRes = other.AnalogOutRes;
        }
        analogOutPortAvRange_.Add(other.analogOutPortAvRange_);
        if (other.AnalogOutPortRange != 0F)
        {
            AnalogOutPortRange = other.AnalogOutPortRange;
        }
        if (other.IpAddr.Length != 0)
        {
            IpAddr = other.IpAddr;
        }
        if (other.NetMask.Length != 0)
        {
            NetMask = other.NetMask;
        }
        if (other.Gateway.Length != 0)
        {
            Gateway = other.Gateway;
        }
        if (other.PrimaryDns.Length != 0)
        {
            PrimaryDns = other.PrimaryDns;
        }
        if (other.SecondaryDns.Length != 0)
        {
            SecondaryDns = other.SecondaryDns;
        }
        if (other.MacAddr.Length != 0)
        {
            MacAddr = other.MacAddr;
        }
        if (other.IpAddrV6.Length != 0)
        {
            IpAddrV6 = other.IpAddrV6;
        }
        if (other.SubPreLengthV6.Length != 0)
        {
            SubPreLengthV6 = other.SubPreLengthV6;
        }
        if (other.GatewayV6.Length != 0)
        {
            GatewayV6 = other.GatewayV6;
        }
        if (other.PrimaryDnsV6.Length != 0)
        {
            PrimaryDnsV6 = other.PrimaryDnsV6;
        }
        if (other.SecondaryDnsV6.Length != 0)
        {
            SecondaryDnsV6 = other.SecondaryDnsV6;
        }
        if (other.Eui64.Length != 0)
        {
            Eui64 = other.Eui64;
        }
        if (other.HostName.Length != 0)
        {
            HostName = other.HostName;
        }
        if (other.DevicePort != 0)
        {
            DevicePort = other.DevicePort;
        }
        if (other.FriendlyDeviceName.Length != 0)
        {
            FriendlyDeviceName = other.FriendlyDeviceName;
        }
        if (other.Ssid.Length != 0)
        {
            Ssid = other.Ssid;
        }
        if (other.SsidStrength != 0)
        {
            SsidStrength = other.SsidStrength;
        }
        if (other.WifiSecurityMode != 0)
        {
            WifiSecurityMode = other.WifiSecurityMode;
        }
        if (other.WifiInfMode != 0)
        {
            WifiInfMode = other.WifiInfMode;
        }
        avSsid_.Add(other.avSsid_);
        avSsidStrength_.Add(other.avSsidStrength_);
        avWifiSecurityMode_.Add(other.avWifiSecurityMode_);
        avWifiInfMode_.Add(other.avWifiInfMode_);
        if (other.DevicePn.Length != 0)
        {
            DevicePn = other.DevicePn;
        }
        if (other.DeviceHwRev.Length != 0)
        {
            DeviceHwRev = other.DeviceHwRev;
        }
        if (other.DeviceFwRev.Length != 0)
        {
            DeviceFwRev = other.DeviceFwRev;
        }
        if (other.DeviceSn != 0UL)
        {
            DeviceSn = other.DeviceSn;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
#else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MsgTimeStamp = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          analogInData_.AddEntriesFrom(input, _repeated_analogInData_codec);
          break;
        }
        case 26:
        case 29: {
          analogInDataFloat_.AddEntriesFrom(input, _repeated_analogInDataFloat_codec);
          break;
        }
        case 34:
        case 32: {
          analogInDataTs_.AddEntriesFrom(input, _repeated_analogInDataTs_codec);
          break;
        }
        case 42: {
          DigitalData = input.ReadBytes();
          break;
        }
        case 50:
        case 48: {
          digitalDataTs_.AddEntriesFrom(input, _repeated_digitalDataTs_codec);
          break;
        }
        case 58:
        case 56: {
          analogOutData_.AddEntriesFrom(input, _repeated_analogOutData_codec);
          break;
        }
        case 64: {
          DeviceStatus = input.ReadUInt32();
          break;
        }
        case 72: {
          PwrStatus = input.ReadUInt32();
          break;
        }
        case 80: {
          BattStatus = input.ReadUInt32();
          break;
        }
        case 88: {
          TempStatus = input.ReadSInt32();
          break;
        }
        case 128: {
          TimestampFreq = input.ReadUInt32();
          break;
        }
        case 136: {
          AnalogInPortNum = input.ReadUInt32();
          break;
        }
        case 144: {
          AnalogInPortNumPriv = input.ReadUInt32();
          break;
        }
        case 154: {
          AnalogInPortType = input.ReadBytes();
          break;
        }
        case 162: {
          AnalogInPortAvRse = input.ReadBytes();
          break;
        }
        case 170: {
          AnalogInPortRse = input.ReadBytes();
          break;
        }
        case 178: {
          AnalogInPortEnabled = input.ReadBytes();
          break;
        }
        case 186:
        case 189: {
          analogInPortAvRange_.AddEntriesFrom(input, _repeated_analogInPortAvRange_codec);
          break;
        }
        case 194:
        case 197: {
          analogInPortAvRangePriv_.AddEntriesFrom(input, _repeated_analogInPortAvRangePriv_codec);
          break;
        }
        case 202:
        case 205: {
          analogInPortRange_.AddEntriesFrom(input, _repeated_analogInPortRange_codec);
          break;
        }
        case 210:
        case 213: {
          analogInPortRangePriv_.AddEntriesFrom(input, _repeated_analogInPortRangePriv_codec);
          break;
        }
        case 216: {
          AnalogInRes = input.ReadUInt32();
          break;
        }
        case 224: {
          AnalogInResPriv = input.ReadUInt32();
          break;
        }
        case 234:
        case 237: {
          analogInIntScaleM_.AddEntriesFrom(input, _repeated_analogInIntScaleM_codec);
          break;
        }
        case 242:
        case 245: {
          analogInIntScaleMPriv_.AddEntriesFrom(input, _repeated_analogInIntScaleMPriv_codec);
          break;
        }
        case 250:
        case 253: {
          analogInCalM_.AddEntriesFrom(input, _repeated_analogInCalM_codec);
          break;
        }
        case 258:
        case 261: {
          analogInCalB_.AddEntriesFrom(input, _repeated_analogInCalB_codec);
          break;
        }
        case 266:
        case 269: {
          analogInCalMPriv_.AddEntriesFrom(input, _repeated_analogInCalMPriv_codec);
          break;
        }
        case 274:
        case 277: {
          analogInCalBPriv_.AddEntriesFrom(input, _repeated_analogInCalBPriv_codec);
          break;
        }
        case 280: {
          DigitalPortNum = input.ReadUInt32();
          break;
        }
        case 290: {
          DigitalPortType = input.ReadBytes();
          break;
        }
        case 298: {
          DigitalPortDir = input.ReadBytes();
          break;
        }
        case 304: {
          AnalogOutPortNum = input.ReadUInt32();
          break;
        }
        case 314: {
          AnalogOutPortType = input.ReadBytes();
          break;
        }
        case 320: {
          AnalogOutRes = input.ReadUInt32();
          break;
        }
        case 330:
        case 333: {
          analogOutPortAvRange_.AddEntriesFrom(input, _repeated_analogOutPortAvRange_codec);
          break;
        }
        case 341: {
          AnalogOutPortRange = input.ReadFloat();
          break;
        }
        case 346: {
          IpAddr = input.ReadBytes();
          break;
        }
        case 354: {
          NetMask = input.ReadBytes();
          break;
        }
        case 362: {
          Gateway = input.ReadBytes();
          break;
        }
        case 370: {
          PrimaryDns = input.ReadBytes();
          break;
        }
        case 378: {
          SecondaryDns = input.ReadBytes();
          break;
        }
        case 386: {
          MacAddr = input.ReadBytes();
          break;
        }
        case 394: {
          IpAddrV6 = input.ReadBytes();
          break;
        }
        case 402: {
          SubPreLengthV6 = input.ReadBytes();
          break;
        }
        case 410: {
          GatewayV6 = input.ReadBytes();
          break;
        }
        case 418: {
          PrimaryDnsV6 = input.ReadBytes();
          break;
        }
        case 426: {
          SecondaryDnsV6 = input.ReadBytes();
          break;
        }
        case 434: {
          Eui64 = input.ReadBytes();
          break;
        }
        case 442: {
          HostName = input.ReadString();
          break;
        }
        case 448: {
          DevicePort = input.ReadUInt32();
          break;
        }
        case 458: {
          FriendlyDeviceName = input.ReadString();
          break;
        }
        case 466: {
          Ssid = input.ReadString();
          break;
        }
        case 472: {
          SsidStrength = input.ReadUInt32();
          break;
        }
        case 480: {
          WifiSecurityMode = input.ReadUInt32();
          break;
        }
        case 488: {
          WifiInfMode = input.ReadUInt32();
          break;
        }
        case 498: {
          avSsid_.AddEntriesFrom(input, _repeated_avSsid_codec);
          break;
        }
        case 506:
        case 504: {
          avSsidStrength_.AddEntriesFrom(input, _repeated_avSsidStrength_codec);
          break;
        }
        case 514:
        case 512: {
          avWifiSecurityMode_.AddEntriesFrom(input, _repeated_avWifiSecurityMode_codec);
          break;
        }
        case 522:
        case 520: {
          avWifiInfMode_.AddEntriesFrom(input, _repeated_avWifiInfMode_codec);
          break;
        }
        case 530: {
          DevicePn = input.ReadString();
          break;
        }
        case 538: {
          DeviceHwRev = input.ReadString();
          break;
        }
        case 546: {
          DeviceFwRev = input.ReadString();
          break;
        }
        case 552: {
          DeviceSn = input.ReadUInt64();
          break;
        }
      }
    }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            if ((tag & 7) == 4)
            {
                // Abort on any end group tag.
                return;
            }
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                case 8:
                    {
                        MsgTimeStamp = input.ReadUInt32();
                        break;
                    }
                case 18:
                case 16:
                    {
                        analogInData_.AddEntriesFrom(ref input, _repeated_analogInData_codec);
                        break;
                    }
                case 26:
                case 29:
                    {
                        analogInDataFloat_.AddEntriesFrom(ref input, _repeated_analogInDataFloat_codec);
                        break;
                    }
                case 34:
                case 32:
                    {
                        analogInDataTs_.AddEntriesFrom(ref input, _repeated_analogInDataTs_codec);
                        break;
                    }
                case 42:
                    {
                        DigitalData = input.ReadBytes();
                        break;
                    }
                case 50:
                case 48:
                    {
                        digitalDataTs_.AddEntriesFrom(ref input, _repeated_digitalDataTs_codec);
                        break;
                    }
                case 58:
                case 56:
                    {
                        analogOutData_.AddEntriesFrom(ref input, _repeated_analogOutData_codec);
                        break;
                    }
                case 64:
                    {
                        DeviceStatus = input.ReadUInt32();
                        break;
                    }
                case 72:
                    {
                        PwrStatus = input.ReadUInt32();
                        break;
                    }
                case 80:
                    {
                        BattStatus = input.ReadUInt32();
                        break;
                    }
                case 88:
                    {
                        TempStatus = input.ReadSInt32();
                        break;
                    }
                case 128:
                    {
                        TimestampFreq = input.ReadUInt32();
                        break;
                    }
                case 136:
                    {
                        AnalogInPortNum = input.ReadUInt32();
                        break;
                    }
                case 144:
                    {
                        AnalogInPortNumPriv = input.ReadUInt32();
                        break;
                    }
                case 154:
                    {
                        AnalogInPortType = input.ReadBytes();
                        break;
                    }
                case 162:
                    {
                        AnalogInPortAvRse = input.ReadBytes();
                        break;
                    }
                case 170:
                    {
                        AnalogInPortRse = input.ReadBytes();
                        break;
                    }
                case 178:
                    {
                        AnalogInPortEnabled = input.ReadBytes();
                        break;
                    }
                case 186:
                case 189:
                    {
                        analogInPortAvRange_.AddEntriesFrom(ref input, _repeated_analogInPortAvRange_codec);
                        break;
                    }
                case 194:
                case 197:
                    {
                        analogInPortAvRangePriv_.AddEntriesFrom(ref input, _repeated_analogInPortAvRangePriv_codec);
                        break;
                    }
                case 202:
                case 205:
                    {
                        analogInPortRange_.AddEntriesFrom(ref input, _repeated_analogInPortRange_codec);
                        break;
                    }
                case 210:
                case 213:
                    {
                        analogInPortRangePriv_.AddEntriesFrom(ref input, _repeated_analogInPortRangePriv_codec);
                        break;
                    }
                case 216:
                    {
                        AnalogInRes = input.ReadUInt32();
                        break;
                    }
                case 224:
                    {
                        AnalogInResPriv = input.ReadUInt32();
                        break;
                    }
                case 234:
                case 237:
                    {
                        analogInIntScaleM_.AddEntriesFrom(ref input, _repeated_analogInIntScaleM_codec);
                        break;
                    }
                case 242:
                case 245:
                    {
                        analogInIntScaleMPriv_.AddEntriesFrom(ref input, _repeated_analogInIntScaleMPriv_codec);
                        break;
                    }
                case 250:
                case 253:
                    {
                        analogInCalM_.AddEntriesFrom(ref input, _repeated_analogInCalM_codec);
                        break;
                    }
                case 258:
                case 261:
                    {
                        analogInCalB_.AddEntriesFrom(ref input, _repeated_analogInCalB_codec);
                        break;
                    }
                case 266:
                case 269:
                    {
                        analogInCalMPriv_.AddEntriesFrom(ref input, _repeated_analogInCalMPriv_codec);
                        break;
                    }
                case 274:
                case 277:
                    {
                        analogInCalBPriv_.AddEntriesFrom(ref input, _repeated_analogInCalBPriv_codec);
                        break;
                    }
                case 280:
                    {
                        DigitalPortNum = input.ReadUInt32();
                        break;
                    }
                case 290:
                    {
                        DigitalPortType = input.ReadBytes();
                        break;
                    }
                case 298:
                    {
                        DigitalPortDir = input.ReadBytes();
                        break;
                    }
                case 304:
                    {
                        AnalogOutPortNum = input.ReadUInt32();
                        break;
                    }
                case 314:
                    {
                        AnalogOutPortType = input.ReadBytes();
                        break;
                    }
                case 320:
                    {
                        AnalogOutRes = input.ReadUInt32();
                        break;
                    }
                case 330:
                case 333:
                    {
                        analogOutPortAvRange_.AddEntriesFrom(ref input, _repeated_analogOutPortAvRange_codec);
                        break;
                    }
                case 341:
                    {
                        AnalogOutPortRange = input.ReadFloat();
                        break;
                    }
                case 346:
                    {
                        IpAddr = input.ReadBytes();
                        break;
                    }
                case 354:
                    {
                        NetMask = input.ReadBytes();
                        break;
                    }
                case 362:
                    {
                        Gateway = input.ReadBytes();
                        break;
                    }
                case 370:
                    {
                        PrimaryDns = input.ReadBytes();
                        break;
                    }
                case 378:
                    {
                        SecondaryDns = input.ReadBytes();
                        break;
                    }
                case 386:
                    {
                        MacAddr = input.ReadBytes();
                        break;
                    }
                case 394:
                    {
                        IpAddrV6 = input.ReadBytes();
                        break;
                    }
                case 402:
                    {
                        SubPreLengthV6 = input.ReadBytes();
                        break;
                    }
                case 410:
                    {
                        GatewayV6 = input.ReadBytes();
                        break;
                    }
                case 418:
                    {
                        PrimaryDnsV6 = input.ReadBytes();
                        break;
                    }
                case 426:
                    {
                        SecondaryDnsV6 = input.ReadBytes();
                        break;
                    }
                case 434:
                    {
                        Eui64 = input.ReadBytes();
                        break;
                    }
                case 442:
                    {
                        HostName = input.ReadString();
                        break;
                    }
                case 448:
                    {
                        DevicePort = input.ReadUInt32();
                        break;
                    }
                case 458:
                    {
                        FriendlyDeviceName = input.ReadString();
                        break;
                    }
                case 466:
                    {
                        Ssid = input.ReadString();
                        break;
                    }
                case 472:
                    {
                        SsidStrength = input.ReadUInt32();
                        break;
                    }
                case 480:
                    {
                        WifiSecurityMode = input.ReadUInt32();
                        break;
                    }
                case 488:
                    {
                        WifiInfMode = input.ReadUInt32();
                        break;
                    }
                case 498:
                    {
                        avSsid_.AddEntriesFrom(ref input, _repeated_avSsid_codec);
                        break;
                    }
                case 506:
                case 504:
                    {
                        avSsidStrength_.AddEntriesFrom(ref input, _repeated_avSsidStrength_codec);
                        break;
                    }
                case 514:
                case 512:
                    {
                        avWifiSecurityMode_.AddEntriesFrom(ref input, _repeated_avWifiSecurityMode_codec);
                        break;
                    }
                case 522:
                case 520:
                    {
                        avWifiInfMode_.AddEntriesFrom(ref input, _repeated_avWifiInfMode_codec);
                        break;
                    }
                case 530:
                    {
                        DevicePn = input.ReadString();
                        break;
                    }
                case 538:
                    {
                        DeviceHwRev = input.ReadString();
                        break;
                    }
                case 546:
                    {
                        DeviceFwRev = input.ReadString();
                        break;
                    }
                case 552:
                    {
                        DeviceSn = input.ReadUInt64();
                        break;
                    }
            }
        }
    }
#endif

}

#endregion


#endregion Designer generated code
